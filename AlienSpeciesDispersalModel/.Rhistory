# Load libraries
library(rworldmap)
library(sp)
# Load data
data(coastsCoarse)
# Get coast lines
coast.lines = coastsCoarse
# Point object at a collection list ..later the spatial table
coast.points <- list()
# Number of coast lines
num.lines = nrow(coast.lines)
# Loop over the datasets with the shortcut of @Jeffrey Evans
# to build the point table via a `list` and a `do.call` of the
# rbind process and build the coordiantes later to prevent
# the usage of `option(warn=XX)`
for (i in 1: num.lines) {
# Get one line and the attribues ..sure not more elements? ..lines[[1]]@Lines[[1]]
coast.points[[i]] <- data.frame(
coast.lines[i,]@lines[[1]]@Lines[[1]]@coords,
coast.lines[i,]@data)
}
# Build the spatial table from the collection list
coast.points <- do.call("rbind", coast.points)
# Assign coordinates from the default Varables
coordinates(coast.points) <- ~X1+X2
# Test the result
plot(coast.lines)
points(coast.points)
# EOF
coast.points
head(coast.points)
head(coastsCoarse)
roads_shp[1:6]
roads_shp[1]
roadTest<-head(roads_shp)
data(roadTest)
source('~/.active-rstudio-document', echo=TRUE)
coast.points
nodes_shp["Knoten_Num"==100004,]
nodes_shp[,"Knoten_Num"==100004]
nodes_shp[,Knoten_Num==100004]
nodes_shp$Knoten_Num
init_nodes <-295133
nodes_shp[,"Knoten_Num"==init_nodes]
head(nodes_shp[,"Knoten_Num"==init_nodes])
head(nodes_shp["Knoten_Num"==init_nodes,])
head(nodes_shp["Knoten_Num"==init_nodes])
head(nodes_shp[,Knoten_Num==init_nodes])
subset(nodes_shp,Knoten_Num%in%init_nodes)
init_nodes <-32365
subset(nodes_shp,Knoten_Num%in%init_nodes)
subset(roads_shp,FromNode%in%init_nodes)
head(roads_shp)
head(roads_shpÂ²data)
head(roads_shp@data)
subset(roads_shp,Von_Knoten%in%init_nodes)
subset(nodes_shp,Knoten_Num%in%100004)
subset(roads_shp,Von_Knoten%in%100004)
coast.points
node_state
nodeNum<-node_state$FromNode
nodeNum_shp<-nodes_shp$Knoten_Num
nodeNum%in%nodeNum_shp
node_state <- as.data.table(unique(c(road_netw[,unique(FromNode)],road_netw[,unique(ToNode)])))
node_state[,state:=0]
node_state[,newarrivals:=0]
names(node_state) <- c("Knoten_Num","state","newarrivals")
node_state[,newarrivals:=as.numeric(newarrivals)]
setkey(node_state,FromNode)
node_state <- as.data.table(unique(c(road_netw[,unique(FromNode)],road_netw[,unique(ToNode)])))
node_state[,state:=0]
node_state[,newarrivals:=0]
names(node_state) <- c("Knoten_Num","state","newarrivals")
node_state[,newarrivals:=as.numeric(newarrivals)]
setkey(node_state,FromNode)
library(rgdal) # only used for plotting
library(sf)
library(data.table)
node_state <- as.data.table(unique(c(road_netw[,unique(FromNode)],road_netw[,unique(ToNode)])))
node_state[,state:=0]
node_state[,newarrivals:=0]
names(node_state) <- c("Knoten_Num","state","newarrivals")
node_state[,newarrivals:=as.numeric(newarrivals)]
setkey(node_state,FromNode)
setkey(node_state,Knoten_Num)
merge(node_state,nodes_shp,by=Knoten_Num)
merge(node_state,nodes_shp,by="Knoten_Num")
str(node_state)
str(nodes_shp)
node_state <- as.data.table(unique(c(road_netw[,unique(FromNode)],road_netw[,unique(ToNode)])))
node_state[,state:=0]
node_state[,newarrivals:=0]
names(node_state) <- c("FromNode","state","newarrivals")
node_state[,newarrivals:=as.numeric(newarrivals)]
setkey(node_state,FromNode)
# roads_shp_sub <- subset(roads_shp,Von_Knoten%in%node_state[state>0,FromNode]) ## create the shapefile subset, not ideal...
node_shp_sub <- subset(nodes_shp,Knoten_Num%in%node_state[,FromNode])
plot(node_shp_sub)
node_shp_sub <- subset(nodes_shp,Knoten_Num%in%node_state[state==0,FromNode])
plot(node_shp_sub)
plot(node_shp_sub,col="red")
dat_nodes <- node_shp_sub@data
dat_nodes <- cbind(dat_nodes,1:dim(dat_nodes)[1])
source('~/GitHub/AlienSpeciesSpread/InitializationScript.R', echo=TRUE)
library(AlienSpeciesDispersalModel)
source('~/GitHub/AlienSpeciesSpread/InitializationScript.R', echo=TRUE)
str(modelResults)
library(AlienSpeciesDispersalModel)
source('~/GitHub/AlienSpeciesSpread/InitializationScript.R', echo=TRUE)
library(AlienSpeciesDispersalModel)
source('~/GitHub/AlienSpeciesSpread/InitializationScript.R', echo=TRUE)
source('~/GitHub/AlienSpeciesSpread/InitializationScript.R', echo=TRUE)
plot(modelResults$state)
summary(modelResults)
source('~/GitHub/AlienSpeciesSpread/InitializationScript.R', echo=TRUE)
table(modelResults)
table(modelResults$state)
source('~/GitHub/AlienSpeciesSpread/InitializationScript.R', echo=TRUE)
summary(modelResults)
library(AlienSpeciesDispersalModel)
source('~/GitHub/AlienSpeciesSpread/InitializationScript.R', echo=TRUE)
road_netw <- st_read(dsn=dir_data,layer=netw_data,stringsAsFactors = F)
road_netw <- as.data.table(road_netw)
road_netw[,Traffic:=DTVLkw+ DTVPkw]
road_netw <- road_netw[,.(Von_Knoten,Nach_Knote,Laenge,Typ, Traffic)]
names(road_netw) <- c("FromNode","ToNode","Length","Type","Traffic")
## add opposite direction (only mean values in both directions are provided so far)
road_netw_otherdir <- road_netw
names(road_netw_otherdir) <- c("FromNode","ToNode","Length","Type","Traffic")
road_netw_otherdir[,ToNode:=road_netw[,FromNode]]
road_netw_otherdir[,FromNode:=road_netw[,ToNode]]
road_netw <- rbind(road_netw,road_netw_otherdir)
nparset<-1
road_netw[,p_attach:=f_attach(Length,parameters[nparset,"att1"],parameters[nparset,"att2"],parameters[nparset,"att3"],p=1)]
road_netw[,p_airflow:=f_airflow(Length,parameters[nparset,"air1"],parameters[nparset,"air2"],p=1)]
col_prob<-road_netw[,.SD,.SDcols=grep("p_",colnames(road_netw))]
road_netw[,Pi:=apply(col_prob,1,pUnion)] #prod by row
road_netw[,Pi:= 1-(1-Pi)^(Traffic*parameters[nparset,"pickup_prob"])]
## set data.table key for road network (much faster)
setkey(road_netw,FromNode)
parameters
node_state <- as.data.table(unique(c(road_netw[,unique(FromNode)],road_netw[,unique(ToNode)])))
node_state[,state:=0]
node_state[,newarrivals:=0]
names(node_state) <- c("FromNode","state","newarrivals")
node_state[,newarrivals:=as.numeric(newarrivals)]
setkey(node_state,FromNode)
node_state[FromNode%in%init_nodes,state:=1]
x <- 0
pb <- txtProgressBar(title = "Simulation state", label = "0% done",min=0, max=num_iter, initial=0,style = 3)
tmp <- proc.time()
for (t in 1:num_iter){
node_state_sub <- node_state[state>0,] # take a subset of occupied nodes, required to speed up 'merge' below
nextnodes <- road_netw[FromNode%in%node_state_sub$FromNode] # identify next nodes
nextnodes <- merge(nextnodes,node_state_sub,by="FromNode") # merge old states and next nodes
newstate <- nextnodes[,1-prod(1-(state * Pi)),by=ToNode] # combine all probs arriving at the same node
node_state[.(newstate$ToNode),newarrivals:=newstate$V1] # add new state to nodes file
node_state[,state:=1-((1-state)*(1-newarrivals))]   # combine old and new state
info <- sprintf("%d%% done", round((t/num_iter)*100))
setTxtProgressBar(pb, t/(100)*100, label=info)
}
close(pb)
# roads_shp_sub <- subset(roads_shp,Von_Knoten%in%node_state[state>0,FromNode]) ## create the shapefile subset, not ideal...
node_shp_sub <- subset(nodes_shp,Knoten_Num%in%node_state[state==0,FromNode])
if (file.exists(file.path(dir_data,data_plot))) load(file.path(dir_data,data_plot))
data_plot<- "road_shp.Rdata"
if (file.exists(file.path(dir_data,data_plot))) load(file.path(dir_data,data_plot))
colour <- rev(colorRampPalette(c("red","orange","yellow"))(101))
x11(width=7,height=8)
op <- par(mar=rep(0,4))
cat("\n Plotting network \n")
plot(border_shp,axes=F,
panel.first=rect(par("usr")[1],par("usr")[3],par("usr")[2],par("usr")[4]))
plot(roads_shp,add=T,col="gray")
}
t<-100
# roads_shp_sub <- subset(roads_shp,Von_Knoten%in%node_state[state>0,FromNode]) ## create the shapefile subset, not ideal...
node_shp_sub <- subset(nodes_shp,Knoten_Num%in%node_state[state==0,FromNode])
head(node_shp_sub)
dat_nodes <- node_shp_sub@data
dat_nodes <- cbind(dat_nodes,1:dim(dat_nodes)[1])
colnames(dat_nodes)[2] <- "order"
dat_nodes$Knoten_Num <- as.numeric(dat_nodes$Knoten_Num)
nodes_col <- merge(node_state,dat_nodes,by.x="FromNode",by.y="Knoten_Num",all.y=T)
nodes_col$norm <- log(nodes_col$state+1)
nodes_col$norm <- round((nodes_col$norm/max(nodes_col$norm)*100)+1)
nodes_col$col <- colour[nodes_col$norm]
nodes_col <- nodes_col[order(nodes_col$order)]
points(node_shp_sub,col=nodes_col$col,pch=16,cex=0.6)
node_shp_sub
plot(node_shp_sub,col=nodes_col$col,pch=16,cex=0.6)
library(AlienSpeciesDispersalModel)
source('~/GitHub/AlienSpeciesSpread/InitializationScript.R', echo=TRUE)
library(AlienSpeciesDispersalModel)
modelResults<-SpreadModel(parameters,
dir_data=dir_data, netw_data=netw_data,init_nodes=init_nodes, num_iter=num_iter,
incl_attachment=T,incl_airflow=T,
makeplot = T, data_plot = data_plot, iter_plot = iterPlot)
summary(modelResults)
library(AlienSpeciesDispersalModel)
source('~/GitHub/AlienSpeciesSpread/InitializationScript.R', echo=TRUE)
library(AlienSpeciesDispersalModel)
source('~/GitHub/AlienSpeciesSpread/InitializationScript.R', echo=TRUE)
load(file.path(dir_data,data_plot))
nodes_shp[,"Knoten_Num"==924872]
nodes_shp["Knoten_Num"==924872,]
nodes_shp["Knoten_Num"==924872]
head(nodes_shp)
nodes_shp$coordinates[nodes_shp$Knoten_Num==924872]
nodes_shp$coordinates[1]
str(nodes_shp)
nodes_shp@data$coordinates[nodes_shp@data$Knoten_Num==924872]
nodes_shp@data$Knoten_Num==924872
tail(nodes_shp)
tail(nodes_shp,100)
tail(nodes_shp,1000)
source('~/GitHub/AlienSpeciesSpread/InitializationScript.R', echo=TRUE)
library(AlienSpeciesDispersalModel)
source('~/GitHub/AlienSpeciesSpread/InitializationScript.R', echo=TRUE)
source('~/GitHub/AlienSpeciesSpread/InitializationScript.R', echo=TRUE)
library(AlienSpeciesDispersalModel)
source('~/GitHub/AlienSpeciesSpread/InitializationScript.R', echo=TRUE)
load(file.path(dir_data,data_plot))
for (i in unique(modelResults$FromNode) {
points(subset(nodes_shp,Knoten_Num%in%i)
print[i]
}
for (i in unique(modelResults$FromNode) {
for (i in unique(modelResults$FromNode)) {
points(subset(nodes_shp,Knoten_Num%in%i))
print[i]
}
i
for (i in unique(modelResults$FromNode)) {
points(subset(nodes_shp,Knoten_Num%in%i))
print(i)
}
modelResults$FromNode[modelResults$FromNode>900000]
modelResults$FromNode[modelResults$FromNode>800000]
modelResults$FromNode[modelResults$FromNode>700000]
for (i in unique(modelResults$FromNode[modelResults$FromNode>700000])) {
points(subset(nodes_shp,Knoten_Num%in%i))
print(i)
}
for (i in unique(modelResults$FromNode[
modelResults$FromNode>600000 & modelResults$FromNode<700000])) {
points(subset(nodes_shp,Knoten_Num%in%i),cex=.3,col=red,pch=16)
print(i)
}
for (i in unique(modelResults$FromNode[
modelResults$FromNode>600000 & modelResults$FromNode<700000])) {
points(subset(nodes_shp,Knoten_Num%in%i),cex=.3,col="red",pch=16)
print(i)
}
for (i in unique(modelResults$FromNode[
modelResults$FromNode>500000 & modelResults$FromNode<600000])) {
points(subset(nodes_shp,Knoten_Num%in%i),cex=.3,col="red",pch=16)
print(i)
}
for (i in unique(modelResults$FromNode[
modelResults$FromNode>500000 & modelResults$FromNode<600000])) {
points(subset(nodes_shp,Knoten_Num%in%i),cex=.3,col="red",pch=16)
print(i)
}
for (i in unique(modelResults$FromNode[
modelResults$FromNode>400000 & modelResults$FromNode<500000])) {
points(subset(nodes_shp,Knoten_Num%in%i),cex=.3,col="red",pch=16)
print(i)
}
for (i in unique(modelResults$FromNode[
modelResults$FromNode>300000 & modelResults$FromNode<400000])) {
points(subset(nodes_shp,Knoten_Num%in%i),cex=.3,col="red",pch=16)
print(i)
}
for (i in unique(modelResults$FromNode[
modelResults$FromNode>300000 & modelResults$FromNode<400000])) {
points(subset(nodes_shp,Knoten_Num%in%i),cex=.8,col="red",pch=16)
print(i)
}
for (i in unique(modelResults$FromNode[
modelResults$FromNode>200000 & modelResults$FromNode<300000])) {
points(subset(nodes_shp,Knoten_Num%in%i),cex=.8,col="red",pch=16)
print(i)
}
for (i in unique(modelResults$FromNode[
modelResults$FromNode>210000 & modelResults$FromNode<220000])) {
points(subset(nodes_shp,Knoten_Num%in%i),cex=.8,col="blue",pch=16)
print(i)
}
for (i in unique(modelResults$FromNode[
modelResults$FromNode>215000 & modelResults$FromNode<220000])) {
points(subset(nodes_shp,Knoten_Num%in%i),cex=.8,col="blue",pch=16)
print(i)
}
for (i in unique(modelResults$FromNode[
modelResults$FromNode>215450 & modelResults$FromNode<215480])) {
points(subset(nodes_shp,Knoten_Num%in%i),cex=.8,col="black",pch=16)
print(i)
}
for (i in unique(modelResults$FromNode[
modelResults$FromNode>215450 & modelResults$FromNode<215452])) {
points(subset(nodes_shp,Knoten_Num%in%i),cex=.8,col="white",pch=16)
print(i)
}
for (i in unique(modelResults$FromNode[
modelResults$FromNode>215460 & modelResults$FromNode<215470])) {
points(subset(nodes_shp,Knoten_Num%in%i),cex=.8,col="white",pch=16)
print(i)
}
source('~/GitHub/AlienSpeciesSpread/InitializationScript.R', echo=TRUE)
library(AlienSpeciesDispersalModel)
source('~/GitHub/AlienSpeciesSpread/InitializationScript.R', echo=TRUE)
head(node_shp_sub)
for (j in init_nodes) points(subset(node_shp_sub,Knoten_Num%in%init_nodes),pch=1,cex=1,col="blue",lwd=2)
for (j in init_nodes) points(subset(node_shp_sub,Knoten_Num%in%j),pch=1,cex=1,col="blue",lwd=2)
library(AlienSpeciesDispersalModel)
library(AlienSpeciesDispersalModel)
source('~/GitHub/AlienSpeciesSpread/AlienSpeciesDispersalModel/R/SpreadModel.R', echo=TRUE)
source('~/GitHub/AlienSpeciesSpread/InitializationScript.R', echo=TRUE)
library(AlienSpeciesDispersalModel)
library(AlienSpeciesDispersalModel)
source('~/GitHub/AlienSpeciesSpread/InitializationScript.R', echo=TRUE)
road_netw <- st_read(dsn=dir_data,layer=netw_data,stringsAsFactors = F)
road_netw <- as.data.table(road_netw)
road_netw[,Traffic:=DTVLkw+ DTVPkw]
road_netw <- road_netw[,.(Von_Knoten,Nach_Knote,Laenge,Typ, Traffic)]
names(road_netw) <- c("FromNode","ToNode","Length","Type","Traffic")
road_netw[,ID:=paste(FromNode,ToNode,sep="_")]
nparset<-1
road_netw[,p_attach:=f_attach(Length,parameters[nparset,"att1"],parameters[nparset,"att2"],parameters[nparset,"att3"],p=1)]
road_netw[,p_attach:= 1-(1-p_attach)^(Traffic*parameters[nparset,"pickup_prob"])]
road_netw[,p_airflow:=f_airflow(Length,parameters[nparset,"air1"],parameters[nparset,"air2"],p=1)]
road_netw[,p_airflow:= 1-(1-p_airflow)^(Traffic*parameters[nparset,"pickup_prob"])]
col_prob<-road_netw[,.SD,.SDcols=grep("p_",colnames(road_netw))]
road_netw[,Pi:=apply(col_prob,1,pUnion)] #prod by row
## set data.table key for road network (much faster)
setkey(road_netw,FromNode)
node_state <- as.data.table(unique(c(road_netw[,unique(FromNode)],road_netw[,unique(ToNode)])))
node_state[,state:=0]
node_state[,newarrivals:=0]
names(node_state) <- c("FromNode","state","newarrivals")
node_state[,newarrivals:=as.numeric(newarrivals)]
setkey(node_state,FromNode)
node_state[FromNode%in%init_nodes,state:=1]
x <- 0
node_state_sub <- node_state[state>0,] # take a subset of occupied nodes, required to speed up 'merge' below
nextnodes <- road_netw[FromNode%in%node_state_sub$FromNode] # identify next nodes
nextnodes <- merge(nextnodes,node_state_sub,by="FromNode") # merge old states and next nodes
newstate <- nextnodes[,1-prod(1-(state * Pi)),by=ToNode] # combine all probs arriving at the same node from different nodes
node_state[.(newstate$ToNode),newarrivals:=newstate$V1] # add new state to nodes file
node_state[,state:=1-((1-state)*(1-newarrivals))]   # combine old and new state
road_netw<-merge(road_netw,node_state[,1:2],by="FromNode")
road_netw[,Pe:=1] #for test only!
#combine to Pinv
road_netw[,Pinv:=Pe*(1-Pi)*state]
road_netw
library(AlienSpeciesDispersalModel)
source('~/GitHub/AlienSpeciesSpread/InitializationScript.R', echo=TRUE)
source('~/GitHub/AlienSpeciesSpread/InitializationScript.R', echo=TRUE)
library(AlienSpeciesDispersalModel)
source('~/GitHub/AlienSpeciesSpread/InitializationScript.R', echo=TRUE)
nextnodes
newstate <- nextnodes[,1-prod(1-(state * Pi)),by=ToNode] # combine all probs arriving at the same node from different nodes
library(AlienSpeciesDispersalModel)
source('~/GitHub/AlienSpeciesSpread/InitializationScript.R', echo=TRUE)
source('~/GitHub/AlienSpeciesSpread/InitializationScript.R', echo=TRUE)
nextnodes
library(AlienSpeciesDispersalModel)
source('~/GitHub/AlienSpeciesSpread/InitializationScript.R', echo=TRUE)
library(AlienSpeciesDispersalModel)
source('~/GitHub/AlienSpeciesSpread/InitializationScript.R', echo=TRUE)
nextnodes
road_netw[node_state[,1:2], `:=`(state = state), on="FromNode"][]
j
t
road_netw <- st_read(dsn=dir_data,layer=netw_data,stringsAsFactors = F)
road_netw <- as.data.table(road_netw)
road_netw[,Traffic:=DTVLkw+ DTVPkw]
road_netw <- road_netw[,.(Von_Knoten,Nach_Knote,Laenge,Typ, Traffic)]
names(road_netw) <- c("FromNode","ToNode","Length","Type","Traffic")
road_netw[,ID:=paste(FromNode,ToNode,sep="_")]
road_netw[,p_attach:=f_attach(Length,parameters[nparset,"att1"],parameters[nparset,"att2"],parameters[nparset,"att3"],p=1)]
road_netw[,p_attach:= 1-(1-p_attach)^(Traffic*parameters[nparset,"pickup_prob"])]
nparset<-1
road_netw[,p_attach:=f_attach(Length,parameters[nparset,"att1"],parameters[nparset,"att2"],parameters[nparset,"att3"],p=1)]
road_netw[,p_attach:= 1-(1-p_attach)^(Traffic*parameters[nparset,"pickup_prob"])]
road_netw[,p_airflow:=f_airflow(Length,parameters[nparset,"air1"],parameters[nparset,"air2"],p=1)]
road_netw[,p_airflow:= 1-(1-p_airflow)^(Traffic*parameters[nparset,"pickup_prob"])]
col_prob<-road_netw[,.SD,.SDcols=grep("p_",colnames(road_netw))]
road_netw[,Pi:=apply(col_prob,1,pUnion)] #prod by row
## set data.table key for road network (much faster)
setkey(road_netw,FromNode)
node_state <- as.data.table(unique(c(road_netw[,unique(FromNode)],road_netw[,unique(ToNode)])))
node_state[,state:=0]
node_state[,newarrivals:=0]
names(node_state) <- c("FromNode","state","newarrivals")
node_state[,newarrivals:=as.numeric(newarrivals)]
setkey(node_state,FromNode)
node_state[FromNode%in%init_nodes,state:=1]
x <- 0
node_state_sub <- node_state[state>0,] # take a subset of occupied nodes, required to speed up 'merge' below
nextnodes <- road_netw[FromNode%in%node_state_sub$FromNode] # identify next nodes
nextnodes <- merge(nextnodes,node_state_sub,by="FromNode") # merge old states and next nodes
newstate <- nextnodes[,1-prod(1-(state * Pi)),by=ToNode] # combine all probs arriving at the same node from different nodes
nextnodes
node_state[.(newstate$ToNode),newarrivals:=newstate$V1] # add new state to nodes file
node_state[,state:=1-((1-state)*(1-newarrivals))]   # combine old and new state
node_state
newstate
road_netw<-merge(road_netw,node_state[,1:2],by="FromNode") # crashes after 1st iteration, multiple state column
road_netw
road_netw[,Pe:=1] #for test only!
#combine to Pinv
road_netw[,Pinv:=Pe*(1-Pi)*state]
node_state_sub <- node_state[state>0,] # take a subset of occupied nodes, required to speed up 'merge' below
nextnodes <- road_netw[FromNode%in%node_state_sub$FromNode] # identify next nodes
nextnodes
newstate <- nextnodes[,1-prod(1-(state * Pi)),by=ToNode] # combine all probs arriving at the same node from different nodes
node_state[.(newstate$ToNode),newarrivals:=newstate$V1] # add new state to nodes file
node_state[,state:=1-((1-state)*(1-newarrivals))]   # combine old and new state
road_netw<-merge(road_netw,node_state[,1:2],by="FromNode") # crashes after 1st iteration, multiple state column
nextnodes
road_netw[,Pe:=1] #for test only!
#combine to Pinv
road_netw[,Pinv:=Pe*(1-Pi)*state]
road_netw
node_state[,1:2]
node_state[,1:2]
road_netw[node_state[,1:2], `:=`(state = state), on="FromNode"][]
road_netw[node_state[,1:2], `:=`(state = state), on="FromNode"][]
library(AlienSpeciesDispersalModel)
source('~/GitHub/AlienSpeciesSpread/InitializationScript.R', echo=TRUE)
library(AlienSpeciesDispersalModel)
source('~/GitHub/AlienSpeciesSpread/InitializationScript.R', echo=TRUE)
library(AlienSpeciesDispersalModel)
source('~/GitHub/AlienSpeciesSpread/InitializationScript.R', echo=TRUE)
library(AlienSpeciesDispersalModel)
source('~/GitHub/AlienSpeciesSpread/InitializationScript.R', echo=TRUE)
modelResults[,state>0]
subset(modelResults[,state>0])
subset(modelResults,state>0)
source('~/GitHub/AlienSpeciesSpread/InitializationScript.R', echo=TRUE)
library(AlienSpeciesDispersalModel)
source('~/GitHub/AlienSpeciesSpread/InitializationScript.R', echo=TRUE)
traceplot()
traceback()
source('~/GitHub/AlienSpeciesSpread/InitializationScript.R', echo=TRUE)
road_netw <- st_read(dsn=dir_data,layer=netw_data,stringsAsFactors = F)
road_netw <- as.data.table(road_netw)
road_netw[,Traffic:=DTVLkw+ DTVPkw]
road_netw <- road_netw[,.(Von_Knoten,Nach_Knote,Laenge,Typ, Traffic)]
names(road_netw) <- c("FromNode","ToNode","Length","Type","Traffic")
road_netw[,ID:=paste(FromNode,ToNode,sep="_")]
nparset<-1
road_netw[,p_attach:=f_attach(Length,parameters[nparset,"att1"],parameters[nparset,"att2"],parameters[nparset,"att3"],p=1)]
road_netw[,p_attach:= 1-(1-p_attach)^(Traffic*parameters[nparset,"pickup_prob"])]
road_netw[,p_airflow:=f_airflow(Length,parameters[nparset,"air1"],parameters[nparset,"air2"],p=1)]
road_netw[,p_airflow:= 1-(1-p_airflow)^(Traffic*parameters[nparset,"pickup_prob"])]
col_prob<-road_netw[,.SD,.SDcols=grep("p_",colnames(road_netw))]
road_netw[,Pi:=apply(col_prob,1,pUnion)] #prod by row
## set data.table key for road network (much faster)
setkey(road_netw,FromNode)
node_state <- as.data.table(unique(c(road_netw[,unique(FromNode)],road_netw[,unique(ToNode)])))
node_state[,state:=0]
node_state[,newarrivals:=0]
names(node_state) <- c("FromNode","state","newarrivals")
node_state[,newarrivals:=as.numeric(newarrivals)]
setkey(node_state,FromNode)
node_state[FromNode%in%init_nodes,state:=1]
if (file.exists(file.path(dir_data,data_plot))) load(file.path(dir_data,data_plot))
colour <- rev(colorRampPalette(c("red","orange","yellow"))(101))
x <- 0
node_state_sub <- node_state[state>0,] # take a subset of occupied nodes, required to speed up 'merge' below
nextnodes <- road_netw[FromNode%in%node_state_sub$FromNode] # identify next nodes
nextnodes <- merge(nextnodes,node_state_sub,by="FromNode") # merge old states and next nodes
newstate <- nextnodes[,1-prod(1-(state * Pi)),by=ToNode] # combine all probs arriving at the same node from different nodes
node_state[.(newstate$ToNode),newarrivals:=newstate$V1] # add new state to nodes file
node_state[,state:=1-((1-state)*(1-newarrivals))]   # combine old and new state
road_netw<-merge(road_netw,node_state[,1:2],by="FromNode") # crashes after 1st iteration, multiple state column
#get PE for segment
road_netw[,Pe:=1] #for test only!
#combine to Pinv
road_netw[,Pinv:=Pe*(1-Pi)*state]
road_netw[,state:=NULL]
road_netw$norm <- log(road_netw$Pinv+1)
road_netw$norm <- round((road_netw$norm/max(road_netw$norm)*100)+1)
road_netw$col <- colour[road_netw$norm]
roads_shp_sub <- subset(roads_shp,ID%in%road_netw[Pinv>0,ID]) ## create the shapefile subset
road_netw$col
points(roads_shp_sub,col=road_netw$col)
points(roads_shp_sub)
plot(roads_shp_sub)
roads_shp@data <-road_netw
roads_shp@data$norm <- log(roads_shp@data$Pinv+1)
roads_shp@data$norm <- round((roads_shp@data$norm/max(roads_shp@data$norm)*100)+1)
roads_shp@data$col <- colour[roads_shp@data$norm]
plot(roads_shp,col=roads_shp@data$col)
library(AlienSpeciesDispersalModel)
source('~/GitHub/AlienSpeciesSpread/InitializationScript.R', echo=TRUE)
library(AlienSpeciesDispersalModel)
source('~/GitHub/AlienSpeciesSpread/InitializationScript.R', echo=TRUE)
library(AlienSpeciesDispersalModel)
source('~/GitHub/AlienSpeciesSpread/InitializationScript.R', echo=TRUE)
library(AlienSpeciesDispersalModel)
source('~/GitHub/AlienSpeciesSpread/InitializationScript.R', echo=TRUE)
hist(modelResults$Pinv)
hist(modelResults$Pinv)
source('~/GitHub/AlienSpeciesSpread/InitializationScript.R', echo=TRUE)
source('~/GitHub/AlienSpeciesSpread/InitializationScript.R', echo=TRUE)
t<-1000
dev.copy(png,file=file.path(dir.name,(paste0("SpreadModelIter",sprintf("%04d", t),".png"))))
source('~/GitHub/AlienSpeciesSpread/InitializationScript.R', echo=TRUE)
