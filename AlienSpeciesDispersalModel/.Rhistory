str(idsList)
plot(roads_dataset[roads_dataset$ID%in%idsList[["0"]]],col="red",add=T)
plot(roads_dataset[roads_dataset$ID%in%idsList[["0"]],],col="red",add=T)
source('C:/Users/mbagnara/Desktop/BiK-F postDoc/Model/Senecio/InitializationScript.R', encoding = 'UTF-8', echo=TRUE)
modelResults<-SpreadModel(parameters,internal_dataset=T,
# dir_data=dir_data, netw_data=netw_data, Rdata_file = Rdata_file,
init_coords=init_coords_senecio, num_iter=num_iter,
incl_attachment=T,incl_airflow=T, LandCoverID=Suitable_LandCoverID,
makeplot = T,#iter_save = iter_save,
max_dist = 10^4,
initialize = FALSE, file_init = "C:/Users/mbagnara/Desktop/BiK-F postDoc/Model/Senecio/05-Sep-2018 15-09-38/init_data.Rdata"
)
num_iter<- 120 # simulation steps
modelResults<-SpreadModel(parameters,internal_dataset=T,
# dir_data=dir_data, netw_data=netw_data, Rdata_file = Rdata_file,
init_coords=init_coords_senecio, num_iter=num_iter,
incl_attachment=T,incl_airflow=T, LandCoverID=Suitable_LandCoverID,
makeplot = T,#iter_save = iter_save,
max_dist = 10^4,
initialize = FALSE, file_init = "C:/Users/mbagnara/Desktop/BiK-F postDoc/Model/Senecio/init_data.Rdata"
#  restart=TRUE,file_restart =
)
## pick-up probability. For Attachment AND airflow dispersal
par_pickup <- 0.000001 *1000#
## attachment kernel parameters
par_att1 <- 0.6556
par_att2 <- -0.05
par_att3 <- 0.3311
#f_attach <- function(D) exp(b*exp(c*(D^g)))
## traffic kernel parameters
# traf1 <- 1e-06
#f_traff <- function(T) 1-exp(-a*T)
## airflow kernel parameters
par_air1<-0.211
par_air2<-0.791
## natural dispersal kernel parameter
par_nat1<- 1.06 # González-Martínez et al . 2006, P. pinaster
par_nat2<- 0.5 #González-Martínez et al . 2006, P. pinaster.   b>1: thin-tailed ; b<1: fat-tailed. Values for b generally found from 0.3 to 0.6 (Nathan et al. 2012)
## establishment scale parameter
par_est<- .5 #arbitrary,<=1. Pioneer species should have high values (more likely to establish if the habitat is suitable), late succession species lower values.
# build parameter matrix
parameters<-matrix(c(par_pickup,par_att1,par_att2,par_att3,par_air1,par_air2,par_nat1,par_nat2,par_est),nrow=1,byrow=T)
colnames(parameters)<-c("pickup_prob", "att1","att2","att3", "air1","air2","nat1","nat2","scale_est")
modelResults<-SpreadModel(parameters,internal_dataset=T,
# dir_data=dir_data, netw_data=netw_data, Rdata_file = Rdata_file,
init_coords=init_coords_senecio, num_iter=num_iter,
incl_attachment=T,incl_airflow=T, LandCoverID=Suitable_LandCoverID,
makeplot = T,#iter_save = iter_save,
max_dist = 10^4,
initialize = FALSE, file_init = "C:/Users/mbagnara/Desktop/BiK-F postDoc/Model/Senecio/init_data.Rdata"
#  restart=TRUE,file_restart =
)
num_iter<- 60 # simulation steps
iter_save <- round(seq(1,num_iter,length.out = 5),0)
modelResults<-SpreadModel(parameters,internal_dataset=T,
# dir_data=dir_data, netw_data=netw_data, Rdata_file = Rdata_file,
init_coords=init_coords_senecio, num_iter=num_iter,
incl_attachment=T,incl_airflow=T, LandCoverID=Suitable_LandCoverID,
makeplot = T,#iter_save = iter_save,
max_dist = 10^4,
initialize = FALSE, file_init = "C:/Users/mbagnara/Desktop/BiK-F postDoc/Model/Senecio/init_data.Rdata"
#  restart=TRUE,file_restart =
)
num_iter<- 30 # simulation steps
modelResults<-SpreadModel(parameters,internal_dataset=T,
# dir_data=dir_data, netw_data=netw_data, Rdata_file = Rdata_file,
init_coords=init_coords_senecio, num_iter=num_iter,
incl_attachment=T,incl_airflow=T, LandCoverID=Suitable_LandCoverID,
makeplot = T,#iter_save = iter_save,
max_dist = 10^4,
initialize = FALSE, file_init = "C:/Users/mbagnara/Desktop/BiK-F postDoc/Model/Senecio/init_data.Rdata"
#  restart=TRUE,file_restart =
)
SenecioData<-as.data.table(read.table("C:/Users/mbagnara/Dropbox/AlienSpeciesSpread/Data/AlienSpecies/Senecio_FrankSchurr/Senecio inaequidens spread data.txt",h=T))
library(AlienSpeciesDispersalModel)
SenecioData<-as.data.table(read.table("C:/Users/mbagnara/Dropbox/AlienSpeciesSpread/Data/AlienSpecies/Senecio_FrankSchurr/Senecio inaequidens spread data.txt",h=T))
#Set initial points of invasion
Bremen<- data.frame(Latitude=53.09, Longitude=08.78)
Calais <- data.frame(Latitude=50.97, Longitude=01.90)
Verviers<- data.frame(Latitude=50.59, Longitude=05.85)
Mazamet<-data.frame(Latitude=43.50, Longitude=02.37)
init_Inv_Senecio<-rbind(Bremen,Calais,Verviers,Mazamet)[,c(2,1)]
countryList<-c("D","NL","B","CH","A","F")
init_year<-1980
init_Locations<-SenecioData[(Year.of.first.record<init_year & Country%in%countryList),
c("Population","Longitude","Latitude","Country")]
init_coords_senecio<-rbind(init_Inv_Senecio,init_Locations[,c("Longitude","Latitude")])
init_coords_senecio[,iter:=0]
#Set landcover IDs suitable for establishment
Suitable_LandCoverID<-c(10:11,12:29) #select all and it should not make a difference
num_iter<- 60 # simulation steps
num_iter<- c(last_year-init_year)*12
last_year<-max(SenecioData$Year.of.first.record)
num_iter<- c(last_year-init_year)*12 # simulation steps, monthly scale
num_iter
iter_save <- round(seq(1,num_iter,length.out = num_iter/12),0)
iter_save
num_iter/12
iter_save <- round(seq(1,num_iter,by = 12),0)
iter_save
iter_save <- round(1,seq(12,num_iter,by = 12),0)
iter_save <- round(c(1,seq(12,num_iter,by = 12)),0)
iter_save
#SET DATA POINTS HERE:
# 1) get locations invaded after init_year
# 2) run package functions to get segments IDs within 10 km(?)
# 3) depending on the year of detection, set Pinv=1 for those IDS at the right number of iterations! Use same structure as in init_data?
data_Locations<-SenecioData[(Year.of.first.record>init_year & Country=="D"),
c("Population","Longitude","Latitude","Country")]
data_Locations
init_Locations<-SenecioData[(Year.of.first.record<init_year & Country%in%countryList),
c("Year.of.first.record","Longitude","Latitude","Country")]
#SET DATA POINTS HERE:
# 1) get locations invaded after init_year
# 2) run package functions to get segments IDs within 10 km(?)
# 3) depending on the year of detection, set Pinv=1 for those IDS at the right number of iterations! Use same structure as in init_data?
data_Locations<-SenecioData[(Year.of.first.record>init_year & Country=="D"),
c("Year.of.first.record","Longitude","Latitude","Country")]
data_coords_senecio<- data_Locations[,c("Longitude","Latitude")]
data_Locations[,iter:=0]
data_coords_senecio<- data_Locations[,c("Longitude","Latitude","iter")]
data_IDs<-getNeighbourSegm(shapeObj = roads_dataset,init_coords = data_coords_senecio, max_dist = 10^4)
iter_save[-1]
data_Locations[,iter:=(year.of.first.record-init_year)*12+1]
data_Locations[,iter:=year.of.first.record-init_year*12+1]
data_Locations[,iter:="year.of.first.record"-init_year*12+1]
init_year
data_Locations[,iter:=Year.of.first.record-init_year*12+1]
data_Locations
data_Locations[,iter:=Year.of.first.record-(init_year*12)]
data_Locations
data_Locations[,iter:=(Year.of.first.record-init_year)*12]
data_Locations
13*12
data_coords_senecio<- data_Locations[,c("Longitude","Latitude","iter")]
# 2) run package functions to get segments IDs within 10 km(?)
data_IDs<-getNeighbourSegm(shapeObj = roads_dataset,init_coords = data_coords_senecio, max_dist = 10^4)
unlist(data_IDs)
data_IDs
lapply(data_IDs,as.data.frame)
# 3) depending on the year of detection, set Pinv=1 for those IDS at the right number of iterations! Use same structure as in init_data?
dataTry<-lapply(data_IDs, function(x) {
x<-data.table(x)
colnames(x)<-ID
x[,Pinv:=1]
})
# 3) depending on the year of detection, set Pinv=1 for those IDS at the right number of iterations! Use same structure as in init_data?
dataTry<-lapply(data_IDs, function(x) {
x<-data.table(x)
colnames(x)<-"ID"
x[,Pinv:=1]
})
data.table(data_IDs[[1]])
as.data.table(data_IDs[[1]])
as.data.frame(data_IDs[[1]])
str(data_IDs)
data_coords_senecio
# 2) run package functions to get segments IDs within 10 km(?)
data_IDs<-getNeighbourSegm(shapeObj = roads_dataset,init_coords = init_coords_senecio, max_dist = 10^4)
str(data_IDs)
init_coords_senecio
data_coords_senecio
# 2) run package functions to get segments IDs within 10 km(?)
data_IDs<-getNeighbourSegm(shapeObj = roads_dataset,init_coords = data_coords_senecio, max_dist = 10^4)
str(data_IDs)
IterToEvaluate<-(Year.of.first.record-init_year)*12
IterToEvaluate<-(data_Locations$Year.of.first.record-init_year)*12
IterToEvaluate<-(data_Locations$Year.of.first.record-init_year)*12
data_Locations[,iter:=IterToEvaluate]
data_coords_senecio<- data_Locations[,c("Longitude","Latitude","iter")]
# 2) run package functions to get segments IDs within 10 km(?)
data_IDs<-getNeighbourSegm(shapeObj = roads_dataset,init_coords = data_coords_senecio, max_dist = 10^4)
str(data_IDs)
nrow(data_coords_senecio)
unique(data_coords_senecio[,3])
length(unique(init_coords_senecio[,3]))
length(unique(data_coords_senecio[,3]))
length(as.character(unique(data_coords_senecio[,3])))
nrow(unique(data_coords_senecio[,3]))
# 2) run package functions to get segments IDs within 10 km(?)
data_IDs<-getNeighbourSegm(shapeObj = roads_dataset,init_coords = data_coords_senecio, max_dist = 10^4)
str
str(data_IDs)
idsList<-vector("list", nrow(unique(data_coords_senecio[,3])))
names(idsList)<-unique(init_coords[,3])
names(idsList)<-unique(data_coords_senecio[,3])
str(idsList)
unique(data_coords_senecio$iter)
unique(data_coords_senecio[,3])
as.vector(unique(data_coords_senecio[,3]))
as.numeric(unique(data_coords_senecio[,3]))
str(unique(data_coords_senecio[,3]))
unlist(unique(data_coords_senecio[,3]))
as.numeric(unlist(unique(data_coords_senecio[,3])))
# 2) run package functions to get segments IDs within 10 km(?)
data_IDs<-getNeighbourSegm(shapeObj = roads_dataset,init_coords = data_coords_senecio, max_dist = 10^4)
str(data_IDs)
as.numeric(unlist(unique(data_coords_senecio[,3])))
library(AlienSpeciesDispersalModel)
# 2) run package functions to get segments IDs within 10 km(?)
data_IDs<-getNeighbourSegm(shapeObj = roads_dataset,init_coords = data_coords_senecio, max_dist = 10^4)
library(AlienSpeciesDispersalModel)
# 2) run package functions to get segments IDs within 10 km(?)
data_IDs<-getNeighbourSegm(shapeObj = roads_dataset,init_coords = data_coords_senecio, max_dist = 10^4)
str(data_IDs)
# 3) depending on the year of detection, set Pinv=1 for those IDS at the right number of iterations! Use same structure as in init_data?
dataTry<-lapply(data_IDs, function(x) {
x<-as.data.table(x)
colnames(x)<-"ID"
x[,Pinv:=1]
})
str(dataTry)
load("C:/Users/mbagnara/Desktop/BiK-F postDoc/Model/Senecio/06-Sep-2018 12-49-43/init_data_1990_SubRoad.Rdata")
x11()
library(AlienSpeciesDispersalModel)
plot(border_dataset)
roads_shp<-init_data$roads_shp
road_netw<-roads_shp@data
init_segm<-init_data$init_segm
node_state<-init_data$node_state
plot(roads_shp,add=T, col="gray")
unique(roads_shp$Type)
(all(road_type!=c("all")))
# set road types to be considered (default is all)
road_type <- c("A","B")
(all(road_type!=c("all")))
roads_shp<-roads_shp[roads_shp@data$Typ%in%road_type,]
roads_shp<-roads_dataset
roads_shp@data$ID<-paste(roads_shp@data$Von_Knoten,roads_shp@data$Nach_Knote,sep="_")
roads_shp@data[, c(4,6,7)]<-sapply(roads_shp@data[, c(4,6,7)], as.numeric)
if (all(road_type!=c("all"))) roads_shp<-roads_shp[roads_shp@data$Typ%in%road_type,]
plot(roads_shp,add=T, col="red")
road_netw <- as.data.table(roads_shp@data)
road_netw[,Traffic:=round((DTVLkw+ DTVPkw)*365/12,0)]
road_netw <- road_netw[,.(Von_Knoten,Nach_Knote,Laenge,Typ, Traffic,ID)]
names(road_netw) <- c("FromNode","ToNode","Length","Type","Traffic","ID")
node_state <- as.data.table(unique(c(road_netw[,unique(FromNode)],road_netw[,unique(ToNode)])))
node_state[,state:=0]
node_state[,newarrivals:=0]
names(node_state) <- c("FromNode","state","newarrivals")
node_state[,newarrivals:=as.numeric(newarrivals)]
setkey(node_state,FromNode)
Bremen<- data.frame(Latitude=53.09, Longitude=08.78)
Calais <- data.frame(Latitude=50.97, Longitude=01.90)
Verviers<- data.frame(Latitude=50.59, Longitude=05.85)
Mazamet<-data.frame(Latitude=43.50, Longitude=02.37)
init_Inv_Senecio<-rbind(Bremen,Calais,Verviers,Mazamet)[,c(2,1)]
countryList<-c("D","NL","B","CH","A","F")
init_year<-1990
init_Locations<-SenecioData[(Year.of.first.record<init_year & Country%in%countryList),
c("Population","Longitude","Latitude","Country")]
init_coords_senecio<-rbind(init_Inv_Senecio,init_Locations[,c("Longitude","Latitude")])
init_coords_senecio[,iter:=0]
#### Initialization info #################################
SenecioData<-as.data.table(read.table("C:/Users/mbagnara/Dropbox/AlienSpeciesSpread/Data/AlienSpecies/Senecio_FrankSchurr/Senecio inaequidens spread data.txt",h=T))
#Set initial points of invasion
Bremen<- data.frame(Latitude=53.09, Longitude=08.78)
Calais <- data.frame(Latitude=50.97, Longitude=01.90)
Verviers<- data.frame(Latitude=50.59, Longitude=05.85)
Mazamet<-data.frame(Latitude=43.50, Longitude=02.37)
init_Inv_Senecio<-rbind(Bremen,Calais,Verviers,Mazamet)[,c(2,1)]
countryList<-c("D","NL","B","CH","A","F")
init_year<-1990
init_Locations<-SenecioData[(Year.of.first.record<init_year & Country%in%countryList),
c("Population","Longitude","Latitude","Country")]
init_coords_senecio<-rbind(init_Inv_Senecio,init_Locations[,c("Longitude","Latitude")])
init_coords_senecio[,iter:=0]
# 2) run package functions to get segments IDs within 10 km(?)
max_dist<-10^4
init_segm <- getNeighbourSegm(shapeObj=roads_shp,init_coords=init_coords_senecio,max_dist=max_dist)
init_nodes <- road_netw[ID%in%init_segm[["0"]],c(FromNode,ToNode)]
node_state[FromNode%in%init_nodes,state:=1]
road_netw[ID%in%init_segm[["0"]],Pinv:=1]
roads_shp@data<-road_netw
plot(roads_shp,add=T, col="blue")
init_data<-list(roads_shp,node_state,init_segm)
names(init_data)<-c("roads_shp","node_state","init_segm")
roads_shp<-init_data$roads_shp
road_netw<-roads_shp@data
init_segm<-init_data$init_segm
node_state<-init_data$node_state
plot(roads_shp,add=T, col="yellow")
#setwd("/home/hanno/Bioinvasion/EBAspread/Data/RoadData")
#### Model parameters #################################
## pick-up probability. For Attachment AND airflow dispersal
par_pickup <- 0.000001#
## attachment kernel parameters
par_att1 <- 0.6556
par_att2 <- -0.05
par_att3 <- 0.3311
#f_attach <- function(D) exp(b*exp(c*(D^g)))
## traffic kernel parameters
# traf1 <- 1e-06
#f_traff <- function(T) 1-exp(-a*T)
## airflow kernel parameters
par_air1<-0.211
par_air2<-0.791
## natural dispersal kernel parameter
par_nat1<- 1.06 # González-Martínez et al . 2006, P. pinaster
par_nat2<- 0.5 #González-Martínez et al . 2006, P. pinaster.   b>1: thin-tailed ; b<1: fat-tailed. Values for b generally found from 0.3 to 0.6 (Nathan et al. 2012)
## establishment scale parameter
par_est<- .6 #arbitrary,<=1. Pioneer species should have high values (more likely to establish if the habitat is suitable), late succession species lower values.
# build parameter matrix
parameters<-matrix(c(par_pickup,par_att1,par_att2,par_att3,par_air1,par_air2,par_nat1,par_nat2,par_est),nrow=1,byrow=T)
colnames(parameters)<-c("pickup_prob", "att1","att2","att3", "air1","air2","nat1","nat2","scale_est")
# BUILD PRIORS HERE
#### Initialization info #################################
SenecioData<-as.data.table(read.table("C:/Users/mbagnara/Dropbox/AlienSpeciesSpread/Data/AlienSpecies/Senecio_FrankSchurr/Senecio inaequidens spread data.txt",h=T))
#Set initial points of invasion
Bremen<- data.frame(Latitude=53.09, Longitude=08.78)
Calais <- data.frame(Latitude=50.97, Longitude=01.90)
Verviers<- data.frame(Latitude=50.59, Longitude=05.85)
Mazamet<-data.frame(Latitude=43.50, Longitude=02.37)
init_Inv_Senecio<-rbind(Bremen,Calais,Verviers,Mazamet)[,c(2,1)]
countryList<-c("D","NL","B","CH","A","F")
init_year<-1990
init_Locations<-SenecioData[(Year.of.first.record<init_year & Country%in%countryList),
c("Population","Longitude","Latitude","Country")]
init_coords_senecio<-rbind(init_Inv_Senecio,init_Locations[,c("Longitude","Latitude")])
init_coords_senecio[,iter:=0]
#Set landcover IDs suitable for establishment
Suitable_LandCoverID<-c(10:11,12:29) #select all and it should not make a difference
last_year<-max(SenecioData$Year.of.first.record)
num_iter<- c(last_year-init_year)*12 # simulation steps, monthly scale
#set according to years of data availability!
# e.g. starting in 1980, town invaded in 1990, iter. 120 should be included (monthly scale, 10 years)
iter_save <- round(c(1,seq(12,num_iter,by = 12)),0)
nparset<-1
road_netw[,p_natural:=f_natural(Length,parameters[nparset,"nat1"],parameters[nparset,"nat2"] )]
road_netw[,p_attach:=f_attach(Length,parameters[nparset,"att1"],parameters[nparset,"att2"],parameters[nparset,"att3"])]
road_netw[,p_attach:= 1-(1-p_attach)^(Traffic*parameters[nparset,"pickup_prob"])]
road_netw[,p_airflow:=f_airflow(Length,parameters[nparset,"air1"],parameters[nparset,"air2"])]
road_netw[,p_airflow:= 1-(1-p_airflow)^(Traffic*parameters[nparset,"pickup_prob"])]
col_prob<-road_netw[,.SD,.SDcols=grep("p_",colnames(road_netw))]
road_netw[,Pi:=apply(col_prob,1,pUnion)] #prod by row
LCprop<-LCproportion(List=LClist,LandCoverID=LandCoverID) #requires LClist, provided as internal data in data/LClist.rda
LCprop<-LCproportion(List=LClist,LandCoverID=Suitable_LandCoverID) #requires LClist, provided as internal data in data/LClist.rda
unique(road_netw$ID)
source('~/GitHub/AlienSpeciesSpread/AlienSpeciesDispersalModel/R/LCproportion.R', echo=TRUE)
str(LCprop)
LCprop<-LCproportion(IDs=unique(road_netw$ID),List=LClist,LandCoverID=Suitable_LandCoverID) #requires LClist, provided as internal data in data/LClist.rda
names(LClist)
names(LClist[1])
names(LClist[[1]])
head(LClist[[1]])
LClist[[1]]
subset(LClist,names(LClist)%in%unique(road_netw$ID))
x<-subset(LClist,names(LClist)%in%unique(road_netw$ID))
str(x)
source('~/GitHub/AlienSpeciesSpread/AlienSpeciesDispersalModel/R/LCproportion.R', echo=TRUE)
LCprop<-LCproportion(IDs=unique(road_netw$ID),List=LClist,LandCoverID=Suitable_LandCoverID) #requires LClist, provided as internal data in data/LClist.rda
warnings()
source('~/GitHub/AlienSpeciesSpread/AlienSpeciesDispersalModel/R/LCproportion.R', echo=TRUE)
LCprop<-LCproportion(IDs=unique(road_netw$ID),List=LClist,LandCoverID=Suitable_LandCoverID) #requires LClist, provided as internal data in data/LClist.rda
library(AlienSpeciesDispersalModel)
source('C:/Users/mbagnara/Desktop/BiK-F postDoc/Model/Senecio/InitializationScript.R', encoding = 'UTF-8', echo=TRUE)
rm(list=ls())
# Model to simulate the spread of propagules attached to motor vehicles
#
# requires the road network: 20180314_Verkehrsbelastungen2015_DTV (shapefile)
#############################################################################
rm(list=ls())
graphics.off()
library(AlienSpeciesDispersalModel)
mainDir<-"C:/Users/mbagnara/Desktop/BiK-F postDoc/Model/Senecio/"
setwd(mainDir)
#setwd("/home/hanno/Bioinvasion/EBAspread/Data/RoadData")
#### Model parameters #################################
## pick-up probability. For Attachment AND airflow dispersal
par_pickup <- 0.000001#
## attachment kernel parameters
par_att1 <- 0.6556
par_att2 <- -0.05
par_att3 <- 0.3311
#f_attach <- function(D) exp(b*exp(c*(D^g)))
## traffic kernel parameters
# traf1 <- 1e-06
#f_traff <- function(T) 1-exp(-a*T)
## airflow kernel parameters
par_air1<-0.211
par_air2<-0.791
## natural dispersal kernel parameter
par_nat1<- 1.06 # González-Martínez et al . 2006, P. pinaster
par_nat2<- 0.5 #González-Martínez et al . 2006, P. pinaster.   b>1: thin-tailed ; b<1: fat-tailed. Values for b generally found from 0.3 to 0.6 (Nathan et al. 2012)
## establishment scale parameter
par_est<- .6 #arbitrary,<=1. Pioneer species should have high values (more likely to establish if the habitat is suitable), late succession species lower values.
# build parameter matrix
parameters<-matrix(c(par_pickup,par_att1,par_att2,par_att3,par_air1,par_air2,par_nat1,par_nat2,par_est),nrow=1,byrow=T)
colnames(parameters)<-c("pickup_prob", "att1","att2","att3", "air1","air2","nat1","nat2","scale_est")
# BUILD PRIORS HERE
#### Initialization info #################################
SenecioData<-as.data.table(read.table("C:/Users/mbagnara/Dropbox/AlienSpeciesSpread/Data/AlienSpecies/Senecio_FrankSchurr/Senecio inaequidens spread data.txt",h=T))
#Set initial points of invasion
Bremen<- data.frame(Latitude=53.09, Longitude=08.78)
Calais <- data.frame(Latitude=50.97, Longitude=01.90)
Verviers<- data.frame(Latitude=50.59, Longitude=05.85)
Mazamet<-data.frame(Latitude=43.50, Longitude=02.37)
init_Inv_Senecio<-rbind(Bremen,Calais,Verviers,Mazamet)[,c(2,1)]
countryList<-c("D","NL","B","CH","A","F")
init_year<-1990
init_Locations<-SenecioData[(Year.of.first.record<init_year & Country%in%countryList),
c("Population","Longitude","Latitude","Country")]
init_coords_senecio<-rbind(init_Inv_Senecio,init_Locations[,c("Longitude","Latitude")])
init_coords_senecio[,iter:=0]
#Set landcover IDs suitable for establishment
Suitable_LandCoverID<-c(10:11,12:29) #select all and it should not make a difference
last_year<-max(SenecioData$Year.of.first.record)
num_iter<- c(last_year-init_year)*12 # simulation steps, monthly scale
#set according to years of data availability!
# e.g. starting in 1980, town invaded in 1990, iter. 120 should be included (monthly scale, 10 years)
iter_save <- round(c(1,seq(12,num_iter,by = 12)),0)
# set road types to be considered (default is all)
road_type <- c("A","B")
#SET DATA POINTS HERE:
# 1) get locations invaded after init_year
data_Locations<-SenecioData[(Year.of.first.record>=init_year & Country=="D"),
c("Year.of.first.record","Longitude","Latitude","Country")]
IterToEvaluate<-(data_Locations$Year.of.first.record-init_year)*12
data_Locations[,iter:=IterToEvaluate]
data_coords_senecio<- data_Locations[,c("Longitude","Latitude","iter")]
# 2) run package functions to get segments IDs within 10 km(?)
max_dist<-10^4
if (exists("road_type")){ data_IDs<-getNeighbourSegm(shapeObj = roads_dataset[roads_dataset@data$Typ%in%road_type,],init_coords = data_coords_senecio, max_dist = max_dist)
} else {data_IDs<-getNeighbourSegm(shapeObj = roads_dataset,init_coords = data_coords_senecio, max_dist = max_dist)
}
# 3) depending on the year of detection, set Pinv=1 for those IDS at the right number of iterations! Use same structure as in init_data?
data_IDs<-lapply(data_IDs, function(x) {
x<-as.data.table(x)
colnames(x)<-"ID"
x[,Pinv:=1]
})
init_coords<-init_coords_senecio
init_data<-InitializeSpread(init_coords=init_coords,max_dist=max_dist,road_type=road_type,save_init=save_init, save_dir=dir.name,file_init=file_init)
save_init=FALSE
init_data<-InitializeSpread(init_coords=init_coords,max_dist=max_dist,road_type=road_type,save_init=save_init, save_dir=dir.name,file_init=file_init)
length(init_data$node_state)
str(init_data$node_state)
nrow(init_data$node_state)
roads_shp<-init_data$roads_shp
road_netw<-roads_shp@data
init_segm<-init_data$init_segm
node_state<-init_data$node_state
road_netw[,p_natural:=f_natural(Length,parameters[nparset,"nat1"],parameters[nparset,"nat2"] )]
nparset<-1
road_netw[,p_natural:=f_natural(Length,parameters[nparset,"nat1"],parameters[nparset,"nat2"] )]
road_netw[,p_attach:=f_attach(Length,parameters[nparset,"att1"],parameters[nparset,"att2"],parameters[nparset,"att3"])]
road_netw[,p_attach:= 1-(1-p_attach)^(Traffic*parameters[nparset,"pickup_prob"])]
road_netw[,p_airflow:=f_airflow(Length,parameters[nparset,"air1"],parameters[nparset,"air2"])]
road_netw[,p_airflow:= 1-(1-p_airflow)^(Traffic*parameters[nparset,"pickup_prob"])]
col_prob<-road_netw[,.SD,.SDcols=grep("p_",colnames(road_netw))]
road_netw[,Pi:=apply(col_prob,1,pUnion)] #prod by row
x11()
plot(border_dataset)
LCprop<-LCproportion(IDs=unique(road_netw$ID),List=LClist,LandCoverID=LandCoverID) #requires LClist, provided as internal data in data/LClist.rda
LandCoverID<-Suitable_LandCoverID
LCprop<-LCproportion(IDs=unique(road_netw$ID),List=LClist,LandCoverID=LandCoverID) #requires LClist, provided as internal data in data/LClist.rda
length(LCprop)
str(LCporp)
str(LCprop)
road_netw<- merge(road_netw,LCprop,by="ID", all=TRUE,sort=FALSE)
str(road_netw)
road_netw[,Pe:=Pe*parameters[nparset,"scale_est"]] # parameter for scaling down probability of establishment
## set data.table key for road network (much faster)
setkey(road_netw,FromNode)
t<1
t<-1
if (t%in%names(init_segm)){
init_nodes <- road_netw[ID%in%init_segm[[as.character(t)]],c(FromNode,ToNode)]
node_state[FromNode%in%init_nodes,state:=1]
road_netw[ID%in%init_segm[[as.character(t)]],Pinv:=1]
}
node_state_sub <- node_state[state>0,] # take a subset of occupied nodes, required to speed up 'merge' below
nextnodes <- road_netw[FromNode%in%node_state_sub$FromNode] # identify next nodes
nextnodes <- merge(nextnodes,node_state_sub,by="FromNode") # merge old states and next nodes
newstate <- nextnodes[,1-prod(1-(state * Pi)),by=ToNode] # combine all probs arriving at the same node from different nodes
node_state[.(newstate$ToNode),newarrivals:=newstate$V1] # add new state to nodes file
node_state[,state:=1-((1-state)*(1-newarrivals))]   # combine old and new state
road_netw<-merge(road_netw,node_state[,1:2],by="FromNode")
#combine all probabilities to Pinv
iters<-as.numeric(names(init_segm))
road_netw[!ID%in%as.character(unlist(init_segm[c(which(iters<t))])),Pinv:=Pe*(1-Pi)*state]
road_netw[,state_node:=state]
road_netw[,state:=NULL]
modelList[["1"]]<-road_netw
modelList<-list()
modelList[["1"]]<-road_netw
str(road_netw)
road_type
unique(road_netw$Type)
source('~/GitHub/AlienSpeciesSpread/AlienSpeciesDispersalModel/R/plotResults.R', echo=TRUE)
roads_shp@data<-road_netw
plotResults(list_results=modelList,shapeObj=roads_shp,save_dir=dir.name)
library(AlienSpeciesDispersalModel)
source('C:/Users/mbagnara/Desktop/BiK-F postDoc/Model/Senecio/InitializationScript.R', encoding = 'UTF-8', echo=TRUE)
# set road types to be considered (default is all)
road_type <- c("A","B","L","S")
#Test model call, to be used as initialization run
modelResults<-SpreadModel(parameters,internal_dataset=T,road_type = road_type,
# dir_data=dir_data, netw_data=netw_data, Rdata_file = Rdata_file,
init_coords=init_coords_senecio, num_iter=num_iter,
incl_attachment=T,incl_airflow=T, LandCoverID=Suitable_LandCoverID,
makeplot = T,#iter_save = iter_save,
max_dist = max_dist,
initialize = TRUE, file_init = "init_data_1990_SubRoad.Rdata"
#  restart=TRUE,file_restart =
)
source('C:/Users/mbagnara/Desktop/BiK-F postDoc/Model/Senecio/InitializationScript.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/mbagnara/Desktop/BiK-F postDoc/Model/Senecio/InitializationScript.R', encoding = 'UTF-8', echo=TRUE)
library(AlienSpeciesDispersalModel)
source('~/GitHub/AlienSpeciesSpread/Scripts/InitializationScript.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/AlienSpeciesSpread/Scripts/InitializationScript.R', encoding = 'UTF-8', echo=TRUE)
library(AlienSpeciesDispersalModel)
