tmp <- proc.time()
for (t in 1:max_times){
node_state_sub <- node_state[state>0,] # take a subset of occupied nodes, required to speed up 'merge' below
nextnodes <- road_netw[FromNode%in%node_state_sub$FromNode] # identify next nodes
nextnodes <- merge(nextnodes,node_state_sub,by="FromNode") # merge old states and next nodes
newstate <- nextnodes[,1-prod(1-(state * disp)),by=ToNode] # combine all probs arriving at the same node
node_state[.(newstate$ToNode),newarrivals:=newstate$V1] # add new state to nodes file
node_state[,state:=1-((1-state)*(1-newarrivals))]   # combine old and new state
### plotting (not ideal as it requires a subset of the road shapefile, which can only be calculated at the end of the simulation; to make the plot the simulation has to be repeated with the now availabe shapefile subet)
if (makeplot){
x <- x + 1
if (t%in%plot_times){ # plot only few steps
# roads_shp_sub <- subset(roads_shp,Von_Knoten%in%node_state[state>0,FromNode]) ## create the shapefile subset, not ideal...
node_shp_sub <- subset(nodes_shp,Knoten_Num%in%node_state[state>0,FromNode])
dat_nodes <- node_shp_sub@data
dat_nodes <- cbind(dat_nodes,1:dim(dat_nodes)[1])
colnames(dat_nodes)[2] <- "order"
dat_nodes$Knoten_Num <- as.numeric(dat_nodes$Knoten_Num)
nodes_col <- merge(node_state,dat_nodes,by.x="FromNode",by.y="Knoten_Num",all.y=T)
nodes_col$norm <- log(nodes_col$state+1)
nodes_col$norm <- round((nodes_col$norm/max(nodes_col$norm)*100)+1)
nodes_col$col <- colour[nodes_col$norm]
nodes_col <- nodes_col[order(nodes_col$order)]
points(node_shp_sub,col=nodes_col$col,pch=16,cex=0.6)
points(subset(node_shp_sub,Knoten_Num==init_node),pch=1,cex=1,col="blue",lwd=2)
mtext(t,side=3,line=-2)
}
}
}
if (makeplot) par(op)
print(proc.time() - tmp)
source('~/GitHub/AlienSpeciesSpread/ModelRoadAttachmentSpread2.r')
road_netw$disp
f_attach(1:250,att1,att2,att3,p=1)
plot(f_attach(1:250,att1,att2,att3,p=1))
## attachment kernel parameters
att1 <- 0.6556
att2 <- -0.05
att3 <- 0.3311
#f_disp <- function(D) exp(b*exp(c*(D^g)))
plot(f_attach(1:250,att1,att2,att3,p=1))
plot(f_airflow(1:250,air1,air2,p=1))
source('~/GitHub/AlienSpeciesSpread/ModelRoadAttachmentSpread2.r')
library(AlienSpeciesDispersalModel)
source('~/GitHub/AlienSpeciesSpread/ModelRoadAttachmentSpread.R')
source('~/GitHub/AlienSpeciesSpread/ModelRoadAttachmentSpread2.r')
source('~/GitHub/AlienSpeciesSpread/ModelRoadAttachmentSpread2.r')
source('~/GitHub/AlienSpeciesSpread/ModelRoadAttachmentSpread2.r')
plot(sort(road_netw$disp),type="l")
road_netw[,traf_prob:=f_traff(Traffic,traf1)]
road_netw[,attach_prob:=f_attach(Length,att1,att2,att3,a0)]
road_netw[,airflow_prob:=f_airflow(Length,air1,air2,a0)]
road_netw[,disp:=traf_prob*attach_prob*airflow_prob]
plot(sort(road_netw$disp),type="l")
f_airflow
source('~/GitHub/AlienSpeciesSpread/ModelRoadAttachmentSpread2.r')
source('~/GitHub/AlienSpeciesSpread/ModelRoadAttachmentSpread2.r')
plot(sort(road_netw$disp),type="l")
plot(sort(road_netw$p_traff),type="l")
plot(sort(road_netw$p_attach),type="l")
source('~/GitHub/AlienSpeciesSpread/ModelRoadAttachmentSpread2.r')
plot(sort(road_netw$p_attach),type="l")
plot(sort(road_netw$p_airflow),type="l")
1*.2
source('~/GitHub/AlienSpeciesSpread/ModelRoadAttachmentSpread2.r')
source('~/GitHub/AlienSpeciesSpread/ModelRoadAttachmentSpread2.r')
log(1)
source('~/GitHub/AlienSpeciesSpread/ModelRoadAttachmentSpread2.r')
source('~/GitHub/AlienSpeciesSpread/ModelRoadAttachmentSpread2.r')
plot(sort(road_netw$p_attach),type="l")
plot(sort(road_netw$p_airflow),type="l")
plot(sort(road_netw$disp),type="l")
plot(sort(exp(road_netw$disp)),type="l")
source('~/GitHub/AlienSpeciesSpread/ModelRoadAttachmentSpread2.r')
source('~/GitHub/AlienSpeciesSpread/ModelRoadAttachmentSpread2.r')
nodes_col
hist(nodes_col$state)
source('~/GitHub/AlienSpeciesSpread/ModelRoadAttachmentSpread2.r')
source('~/GitHub/AlienSpeciesSpread/ModelRoadAttachmentSpread2.r')
source('~/GitHub/AlienSpeciesSpread/ModelRoadAttachmentSpread2.r')
x
j
Knoten_Num%in%init_node
subset(node_shp_sub,Knoten_Num%in%init_node)
source('~/GitHub/AlienSpeciesSpread/ModelRoadAttachmentSpread2.r')
subset(places_shp,name=="Hamburg")
subset(places_shp,name=="Hamburg_Hafen")
subset(places_shp,name=="Hamburg Hafen")
subset(places_shp,name=="HamburgHafen")
subset(nodes_shp,coordinates=="9.998816, 53.55026")
subset(nodes_shp,coordinates=="9.99881")
subset(nodes_shp,coords==9.99881)
str(nodes_shp)
subset(nodes_shp,coords.x1==9.99881)
nodes_shp@coords.x1==9.99881
nodes_shp@coord$coords.x1==9.99881
nodes_shp@coords$coords.x1==9.99881
subset(nodes_shp@coords,coords.x1==9.99881)
hist(nodes_shp@coords$coords.x1)
str(nodes_shp@coords)
head(nodes_shp@coords)
head(nodes_shp@coords[,1])
nodes_shp@Data$Knoten_Num[nodes_shp@coords$coords.x1==9.998816 & nodes_shp@coords$coords.x1==53.55026]
nodes_shp@data$Knoten_Num[nodes_shp@coords$coords.x1==9.998816 & nodes_shp@coords$coords.x1==53.55026]
nodes_shp@data$Knoten_Num[nodes_shp@coords$[,1]==9.998816 & nodes_shp@coords[,2]==53.55026]
nodes_shp@data$Knoten_Num[nodes_shp@coords[,1]==9.998816 & nodes_shp@coords[,2]==53.55026]
nodes_shp@data$Knoten_Num[nodes_shp@coords[,1]==9.99881 & nodes_shp@coords[,2]==53.5502]
nodes_shp@data$Knoten_Num[nodes_shp@coords[,1]>9.99881 & nodes_shp@coords[,1]<9.99882 & nodes_shp@coords[,2]>53.5502 & nodes_shp@coords[,2]<53.5503]
nodes_shp@data$Knoten_Num[nodes_shp@coords[,1]>9.98 & nodes_shp@coords[,1]<10 & nodes_shp@coords[,2]>53.54 & nodes_shp@coords[,2]<53.56]
nodes_shp@data$Knoten_Num[nodes_shp@coords[,1]>9.99 & nodes_shp@coords[,1]<10 & nodes_shp@coords[,2]>53.54 & nodes_shp@coords[,2]<53.56]
nodes_shp@data$Knoten_Num[nodes_shp@coords[,1]>9.99 & nodes_shp@coords[,1]<10 & nodes_shp@coords[,2]>53.55 & nodes_shp@coords[,2]<53.56]
source('~/GitHub/AlienSpeciesSpread/ModelRoadAttachmentSpread2.r')
source('~/GitHub/AlienSpeciesSpread/ModelRoadAttachmentSpread2.r')
nodes_Ham<-nodes_shp@data$Knoten_Num[nodes_shp@coords[,1]>9.99 & nodes_shp@coords[,1]<10 & nodes_shp@coords[,2]>53.55 & nodes_shp@coords[,2]<53.56]
subset(nodes_shp,Knoten_Num%in%nodes_Ham)
source('~/GitHub/AlienSpeciesSpread/ModelRoadAttachmentSpread2.r')
.37+.81-.36
install.packages("magick")
library(magick)
source('~/GitHub/AlienSpeciesSpread/ModelRoadAttachmentSpread2.r')
dev.off()
dev.off()
animation <- image_animate(img, fps = 2)
print(animation)
img
print(img)
source('~/GitHub/AlienSpeciesSpread/ModelRoadAttachmentSpread2.r')
x11()
print(animation)
animation
image_write(animation, "gapminderSimulationTest.gif")
source('~/GitHub/AlienSpeciesSpread/ModelRoadAttachmentSpread2.r')
source('~/GitHub/AlienSpeciesSpread/ModelRoadAttachmentSpread2.r')
source('~/GitHub/AlienSpeciesSpread/ModelRoadAttachmentSpread2.r')
source('~/GitHub/AlienSpeciesSpread/ModelRoadAttachmentSpread2.r')
source('~/GitHub/AlienSpeciesSpread/ModelRoadAttachmentSpread2.r')
source('~/.active-rstudio-document')
cp.quadratic(c(0.1, 0.2, 0.3))
p1<-.1
p2<-.2
p3<-.3
p1.2<-p1*p2
p2.3<-p2*p3
p1.2.3<-p1*p2*p3
p1+p2+p3-p1.2-p2.3+p1.2.3
cp.quadratic(c(p1, p2, p3))
sum(cp.quadratic(c(p1, p2, p3))[-1])
sum(cp.quadratic(c(p1, p2, p3))[-2])
sum(cp.quadratic(c(p1, p2, p3))[-3])
sum(cp.quadratic(c(p1, p2, p3))[-1:3])
0.398 +0.092+ 0.006
0.398 *0.092* 0.006
p<-c(p1,p2,p3)
1 - prod(1-p)
prod(1-p)
p[1]+p[2]+p[3]-p[1]*p[2]-p[2]*p[3]+p[1]*p[2]*p[3]
P <- matrix(0, nrow=length(p), ncol=length(p))
p
P
P[1,] <- rev(cumsum(rev(p * prod(1-p) / (1-p))))
P
for (i in seq(2, length(p))) {
P[i,] <- c(rev(cumsum(rev(head(p, -1) / (1-head(p, -1)) * tail(P[i-1,], -1)))), 0)
}
P
sum(P)
row.sum(P)
rowSums(P)
colSums(P)
.496+.216
sum(p[1:length(p)])
p[1] & p[2]
?prob
??prob
?permute
??permute
permutations(p)
install.packages("e1071")
library(e1071)
permutations(p)
permutations(3)
permutations(2)
p[1]+p[2]+p[3]-p[1]*p[2]-p[2]*p[3]-p[1]*p[3]+p[1]*p[2]*p[3]
1 - prod(1-p)
permutations[4]
permutations(4)
p1<-.1
p2<-.2
p3<-.3
p4<-.4
p<-c(p1,p2,p3,p4)
p[1]+p[2]+p[3]-p[1]*p[2]-p[2]*p[3]-p[1]*p[4]-p[2]*p[3]- p[2]*p[4] -p[3]*p[4]
+p[1]*p[2]*p[3] + p[1]*p[2]*p[4]+ p[1]*p[3]*p[4] + p[2]*p[3]*p[4]
-p[1]*p[2]*p[3]*p[4]
p1<-.1
p2<-.2
p3<-.3
p4<-.4
p<-c(p1,p2,p3,p4)
p[1]+p[2]+p[3]-p[1]*p[2]-p[2]*p[3]-p[1]*p[4]-p[2]*p[3]- p[2]*p[4] -p[3]*p[4]+
p[1]*p[2]*p[3] + p[1]*p[2]*p[4]+ p[1]*p[3]*p[4] + p[2]*p[3]*p[4]-
p[1]*p[2]*p[3]*p[4]
1 - prod(1-p)
p[1]+p[2]+p[3]+p[4]-
p[1]*p[2]-p[1]*p[3]-p[1]*p[4]-p[2]*p[3]- p[2]*p[4] -p[3]*p[4]+
p[1]*p[2]*p[3] + p[1]*p[2]*p[4]+ p[1]*p[3]*p[4] + p[2]*p[3]*p[4]-
p[1]*p[2]*p[3]*p[4]
# Model to simulate the spread of propagules attached to motor vehicles
#
# requires the road network: 20180314_Verkehrsbelastungen2015_DTV (shapefile)
#############################################################################
rm(list=ls())
#graphics.off()
library(rgdal) # only used for plotting
library(sf)
library(data.table)
setwd("C:/Users/mbagnara/Desktop/BiK-F postDoc/Data/TestDataRoad/20180314_Verkehrsbelastungen2015_DTV/")
#setwd("/home/hanno/Bioinvasion/EBAspread/Data/RoadData")
makeplot <- T # plot spread?
#### Model paramters and functions #################################
## pick-up probability. For Attachment AND airflow dispersal
a0 <- 0.001 #
## attachment kernel parameters
att1 <- 0.6556
att2 <- -0.05
att3 <- 0.3311
#f_disp <- function(D) exp(b*exp(c*(D^g)))
## traffic kernel parameters
traf1 <- 1e-06
#f_traff <- function(T) 1-exp(-a*T)
## airflow kernel parameters
air1<-0.211
air2<-0.791
# include\exclude drivers
include_traffic<-T
include_attach<-T
include_airflow<-F
####################################################################
### load shapefiles (takes a while!) ######################################################
### load shapefiles (takes a while!) ######################################################
if (makeplot){
if (file.exists("road_shp.Rdata")) load("road_shp.Rdata")
else {
setwd("C:/Users/mbagnara/Desktop/BiK-F postDoc/Data/gadm36_DEU_shp/")
border_shp <- readOGR(dsn=getwd(),layer="gadm36_DEU_1",stringsAsFactors = F)
setwd("C:/Users/mbagnara/Desktop/BiK-F postDoc/Data/germany-places-shape/")
places_shp <- readOGR(dsn=getwd(),layer="places",stringsAsFactors = F)
setwd("C:/Users/mbagnara/Desktop/BiK-F postDoc/Data/TestDataRoad/20180314_Verkehrsbelastungen2015_DTV/")
roads_shp <- readOGR(dsn=getwd(),layer="20180314_Verkehrsbelastungen2015_DTV",stringsAsFactors = F)
nodes_shp <- readOGR(dsn=getwd(),layer="20180209_KnotenNemobfstr",stringsAsFactors = F)
cat("\n Converting coordinates to WGS84")
cat("\n")
roads_shp<-spTransform(roads_shp, CRS("+proj=longlat +datum=WGS84"))
nodes_shp<-spTransform(nodes_shp, CRS("+proj=longlat +datum=WGS84"))
save(border_shp,roads_shp,nodes_shp,places_shp,file="road_shp.Rdata")
}
colour <- rev(colorRampPalette(c("red","orange","yellow"))(101))
}
## load network ###################################
road_netw <- st_read(dsn=getwd(),layer="20180314_Verkehrsbelastungen2015_DTV",stringsAsFactors = F)
road_netw <- as.data.table(road_netw)
road_netw <- road_netw[,.(Von_Knoten,Nach_Knote,Laenge,DTVKfzMode)]
names(road_netw) <- c("FromNode","ToNode","Length","Traffic")
## add opposite direction (only mean values in both directions are provided so far)
road_netw_otherdir <- road_netw
names(road_netw_otherdir) <- c("FromNode","ToNode","Length","Traffic")
road_netw_otherdir[,ToNode:=road_netw[,FromNode]]
road_netw_otherdir[,FromNode:=road_netw[,ToNode]]
road_netw <- rbind(road_netw,road_netw_otherdir)
## transform measures into a single dispersal probability
# Events are considered mutually exclusive: a seed can get to the next node by one driver alone. Does not consider a population of seeds.
# road_netw[,Length:=f_disp(Length)]
# road_netw[,Traffic:=f_traff(Traffic)]
road_netw[,disp:=0]
if (include_traffic) road_netw[,p_traff:=f_traff(Traffic,traf1)]
if (include_attach) road_netw[,p_attach:=f_attach(Length,att1,att2,att3,a0)]
if (include_airflow) road_netw[,p_airflow:=f_airflow(Length,air1,air2,a0)]
grep("p_",colnames(road_netw))
colnames(road_netw)
# Model to simulate the spread of propagules attached to motor vehicles
#
# requires the road network: 20180314_Verkehrsbelastungen2015_DTV (shapefile)
#############################################################################
rm(list=ls())
#graphics.off()
library(rgdal) # only used for plotting
library(sf)
library(data.table)
setwd("C:/Users/mbagnara/Desktop/BiK-F postDoc/Data/TestDataRoad/20180314_Verkehrsbelastungen2015_DTV/")
#setwd("/home/hanno/Bioinvasion/EBAspread/Data/RoadData")
makeplot <- T # plot spread?
#### Model paramters and functions #################################
## pick-up probability. For Attachment AND airflow dispersal
a0 <- 0.001 #
## attachment kernel parameters
att1 <- 0.6556
att2 <- -0.05
att3 <- 0.3311
#f_disp <- function(D) exp(b*exp(c*(D^g)))
## traffic kernel parameters
traf1 <- 1e-06
#f_traff <- function(T) 1-exp(-a*T)
## airflow kernel parameters
air1<-0.211
air2<-0.791
# include\exclude drivers
include_traffic<-T
include_attach<-T
include_airflow<-F
####################################################################
### load shapefiles (takes a while!) ######################################################
### load shapefiles (takes a while!) ######################################################
if (makeplot){
if (file.exists("road_shp.Rdata")) load("road_shp.Rdata")
else {
setwd("C:/Users/mbagnara/Desktop/BiK-F postDoc/Data/gadm36_DEU_shp/")
border_shp <- readOGR(dsn=getwd(),layer="gadm36_DEU_1",stringsAsFactors = F)
setwd("C:/Users/mbagnara/Desktop/BiK-F postDoc/Data/germany-places-shape/")
places_shp <- readOGR(dsn=getwd(),layer="places",stringsAsFactors = F)
setwd("C:/Users/mbagnara/Desktop/BiK-F postDoc/Data/TestDataRoad/20180314_Verkehrsbelastungen2015_DTV/")
roads_shp <- readOGR(dsn=getwd(),layer="20180314_Verkehrsbelastungen2015_DTV",stringsAsFactors = F)
nodes_shp <- readOGR(dsn=getwd(),layer="20180209_KnotenNemobfstr",stringsAsFactors = F)
cat("\n Converting coordinates to WGS84")
cat("\n")
roads_shp<-spTransform(roads_shp, CRS("+proj=longlat +datum=WGS84"))
nodes_shp<-spTransform(nodes_shp, CRS("+proj=longlat +datum=WGS84"))
save(border_shp,roads_shp,nodes_shp,places_shp,file="road_shp.Rdata")
}
colour <- rev(colorRampPalette(c("red","orange","yellow"))(101))
}
## load network ###################################
road_netw <- st_read(dsn=getwd(),layer="20180314_Verkehrsbelastungen2015_DTV",stringsAsFactors = F)
road_netw <- as.data.table(road_netw)
road_netw <- road_netw[,.(Von_Knoten,Nach_Knote,Laenge,DTVKfzMode)]
names(road_netw) <- c("FromNode","ToNode","Length","Traffic")
## add opposite direction (only mean values in both directions are provided so far)
road_netw_otherdir <- road_netw
names(road_netw_otherdir) <- c("FromNode","ToNode","Length","Traffic")
road_netw_otherdir[,ToNode:=road_netw[,FromNode]]
road_netw_otherdir[,FromNode:=road_netw[,ToNode]]
road_netw <- rbind(road_netw,road_netw_otherdir)
## transform measures into a single dispersal probability
# Events are considered mutually exclusive: a seed can get to the next node by one driver alone. Does not consider a population of seeds.
# road_netw[,Length:=f_disp(Length)]
# road_netw[,Traffic:=f_traff(Traffic)]
road_netw[,disp:=0]
if (include_traffic) road_netw[,p_traff:=f_traff(Traffic,traf1)]
if (include_attach) road_netw[,p_attach:=f_attach(Length,att1,att2,att3,a0)]
if (include_airflow) road_netw[,p_airflow:=f_airflow(Length,air1,air2,a0)]
grep("p_",colnames(road_netw))
library(AlienSpeciesDispersalModel)
# Model to simulate the spread of propagules attached to motor vehicles
#
# requires the road network: 20180314_Verkehrsbelastungen2015_DTV (shapefile)
#############################################################################
rm(list=ls())
#graphics.off()
library(rgdal) # only used for plotting
library(sf)
library(data.table)
setwd("C:/Users/mbagnara/Desktop/BiK-F postDoc/Data/TestDataRoad/20180314_Verkehrsbelastungen2015_DTV/")
#setwd("/home/hanno/Bioinvasion/EBAspread/Data/RoadData")
makeplot <- T # plot spread?
#### Model paramters and functions #################################
## pick-up probability. For Attachment AND airflow dispersal
a0 <- 0.001 #
## attachment kernel parameters
att1 <- 0.6556
att2 <- -0.05
att3 <- 0.3311
#f_disp <- function(D) exp(b*exp(c*(D^g)))
## traffic kernel parameters
traf1 <- 1e-06
#f_traff <- function(T) 1-exp(-a*T)
## airflow kernel parameters
air1<-0.211
air2<-0.791
# include\exclude drivers
include_traffic<-T
include_attach<-T
include_airflow<-F
####################################################################
### load shapefiles (takes a while!) ######################################################
### load shapefiles (takes a while!) ######################################################
if (makeplot){
if (file.exists("road_shp.Rdata")) load("road_shp.Rdata")
else {
setwd("C:/Users/mbagnara/Desktop/BiK-F postDoc/Data/gadm36_DEU_shp/")
border_shp <- readOGR(dsn=getwd(),layer="gadm36_DEU_1",stringsAsFactors = F)
setwd("C:/Users/mbagnara/Desktop/BiK-F postDoc/Data/germany-places-shape/")
places_shp <- readOGR(dsn=getwd(),layer="places",stringsAsFactors = F)
setwd("C:/Users/mbagnara/Desktop/BiK-F postDoc/Data/TestDataRoad/20180314_Verkehrsbelastungen2015_DTV/")
roads_shp <- readOGR(dsn=getwd(),layer="20180314_Verkehrsbelastungen2015_DTV",stringsAsFactors = F)
nodes_shp <- readOGR(dsn=getwd(),layer="20180209_KnotenNemobfstr",stringsAsFactors = F)
cat("\n Converting coordinates to WGS84")
cat("\n")
roads_shp<-spTransform(roads_shp, CRS("+proj=longlat +datum=WGS84"))
nodes_shp<-spTransform(nodes_shp, CRS("+proj=longlat +datum=WGS84"))
save(border_shp,roads_shp,nodes_shp,places_shp,file="road_shp.Rdata")
}
colour <- rev(colorRampPalette(c("red","orange","yellow"))(101))
}
## load network ###################################
road_netw <- st_read(dsn=getwd(),layer="20180314_Verkehrsbelastungen2015_DTV",stringsAsFactors = F)
road_netw <- as.data.table(road_netw)
road_netw <- road_netw[,.(Von_Knoten,Nach_Knote,Laenge,DTVKfzMode)]
names(road_netw) <- c("FromNode","ToNode","Length","Traffic")
## add opposite direction (only mean values in both directions are provided so far)
road_netw_otherdir <- road_netw
names(road_netw_otherdir) <- c("FromNode","ToNode","Length","Traffic")
road_netw_otherdir[,ToNode:=road_netw[,FromNode]]
road_netw_otherdir[,FromNode:=road_netw[,ToNode]]
road_netw <- rbind(road_netw,road_netw_otherdir)
## transform measures into a single dispersal probability
# Events are considered mutually exclusive: a seed can get to the next node by one driver alone. Does not consider a population of seeds.
# road_netw[,Length:=f_disp(Length)]
# road_netw[,Traffic:=f_traff(Traffic)]
road_netw[,disp:=0]
if (include_traffic) road_netw[,p_traff:=f_traff(Traffic,traf1)]
if (include_attach) road_netw[,p_attach:=f_attach(Length,att1,att2,att3,a0)]
if (include_airflow) road_netw[,p_airflow:=f_airflow(Length,air1,air2,a0)]
grep("p_",colnames(road_netw))
road_netw[, grep("p_",colnames(road_netw))]
road_netw[, c(grep("p_",colnames(road_netw)))]
colnames(road_netw)[grep("p_",colnames(road_netw))]
road_netw[,colnames(road_netw)[grep("p_",colnames(road_netw))]]
road_netw[,1]
road_netw[,c(1,2)]
road_netw[,c(6,7)]
grep("p_",colnames(road_netw))
c(grep("p_",colnames(road_netw)))
road_netw[,c(grep("p_",colnames(road_netw)))]
d<-c(1,2)
road_netw[,d]
road_netw[,c(1,2)]
road_netw[,c(6,7)]
prob_col<-grep("p_",colnames(road_netw))
road_netw[,c(prob_col[1],prob_col[2])]
grep("p_",colnames(road_netw))
prob_col[1]
road_netw[,prob_col[1]
]
colnames(road_netw)[grep("p_",colnames(road_netw))]
prob_names<-colnames(road_netw)[grep("p_",colnames(road_netw))]
road_netw[,prob_col[1]]
road_netw[,prob_names[1]]
road_netw[,prob_names
]
install.packages("animation")
source('~/GitHub/AlienSpeciesSpread/ModelRoadAttachmentSpread2.r')
source('~/GitHub/AlienSpeciesSpread/ModelRoadAttachmentSpread2.r')
ftraff(1:250,traf1)
p1<-.1
p2<-.2
p3<-.3
p4<-.4
p<-c(p1,p2,p3,p4)
p[1]+p[2]+p[3]+p[4]-
p[1]*p[2]-p[1]*p[3]-p[1]*p[4]-p[2]*p[3]- p[2]*p[4] -p[3]*p[4]+
p[1]*p[2]*p[3] + p[1]*p[2]*p[4]+ p[1]*p[3]*p[4] + p[2]*p[3]*p[4]-
p[1]*p[2]*p[3]*p[4]
1 - prod(1-p)
source('~/GitHub/AlienSpeciesSpread/ModelRoadAttachmentSpread2.r')
if (makeplot){
#  graphics.off()
x11(width=7,height=8)
op <- par(mar=rep(0,4))
plot(border_shp,axes=F,
panel.first=rect(par("usr")[1],par("usr")[3],par("usr")[2],par("usr")[4]))
plot(subset(roads_netw[,Laenderken!=0]),add=T,col="gray")
}
if (makeplot){
#  graphics.off()
x11(width=7,height=8)
op <- par(mar=rep(0,4))
plot(border_shp,axes=F,
panel.first=rect(par("usr")[1],par("usr")[3],par("usr")[2],par("usr")[4]))
plot(subset(road_netw[,Laenderken!=0]),add=T,col="gray")
}
plot(subset(road_netw[Laenderken!=0]),add=T,col="gray")
plot(subset(road_netw,Laenderken!=0),add=T,col="gray")
colnames(road_netw)
road_netw <- st_read(dsn=getwd(),layer="20180314_Verkehrsbelastungen2015_DTV",stringsAsFactors = F)
road_netw <- as.data.table(road_netw)
plot(subset(road_netw,Laenderken!=0),add=T,col="gray")
colnames(road_shp)
colnames(road_shp@data)
colnames(roads_shp@data)
if (makeplot){
#  graphics.off()
x11(width=7,height=8)
op <- par(mar=rep(0,4))
plot(border_shp,axes=F,
panel.first=rect(par("usr")[1],par("usr")[3],par("usr")[2],par("usr")[4]))
plot(subset(roads_shp[,Laenderken!=0]),add=T,col="gray")
}
plot(subset(roads_shp, Laenderken!=0),add=T,col="gray")
library(animation)
?animation
setwd("C:/Users/mbagnara/Desktop/")
library(animation)
## make sure ImageMagick has been installed in your system
saveGIF({
for (i in 1:10) plot(runif(10), ylim = 0:1)
})
library(animation)
## make sure ImageMagick has been installed in your system
saveGIF({
for (i in 1:10) plot(runif(10), ylim = 0:1)
})
?im.convert
ani.options("convert")
