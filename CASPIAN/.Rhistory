Pallets_netw[,AreaLinkID:=paste(FromArea,ToArea,sep="_")]
# initialize state of Cargo Areas
Pallets_netw[,stateFromArea:=0]
Pallets_netw[,stateToArea:=0]
Pallets_netw[,newarrivals:=0]
# Update initial state of Cargo Areas
Pallets_netw[FromArea%in%init_Areas,stateFromArea:=1]
Pallets_netw[ToArea%in%init_Areas,stateToArea:=1]
}
###############################################################
## Container flows ############################################
if  (incl_containers==TRUE) {
cat("\n Initializing Containers Flow \n")
## container data
Container_netw<-as.data.table(Container_netw_data) #need to update to provide external file here. Perhaps also in network file?
Container_netw$ToArea <- as.character(Container_netw$ToArea)
Container_netw$FromArea <- as.character(Container_netw$FromArea)
Container_netw<-Container_netw[FromArea!=ToArea,] #remove traffic from/to same area
Container_netw<-Container_netw[ToArea%in%Nodes_CargoCell$AreaContainer,] #subset, keep only areas where there are traffic nodes of the chosen netw_type
# remove areas with number of arriving containers per year < than Cont_treshold:
if (Cont_treshold>0) { Container_netw<-Container_netw[numContainers>=Cont_treshold,]}
Container_netw[,numContainers:=numContainers/12] #monthly scale
Container_netw<-as.data.table(aggregate(numContainers ~ ToArea, Container_netw, sum))
Nodes_ContCell<-Nodes_CargoCell[,c(1,3)]
colnames(Nodes_ContCell)<-c("ToArea","FromNode")
setkey(Container_netw,ToArea)
setkey(Nodes_ContCell,ToArea)
Container_netw<-merge(Container_netw,Nodes_ContCell,by="ToArea")
#divide number of container per number of nodes in each area (assumes each nodes gets same number of containers)
NodesPerArea<-as.data.table(table(Container_netw$ToArea))
colnames(NodesPerArea)<-c("ToArea","numNodes")
setkey(NodesPerArea,ToArea)
Container_netw<-merge(Container_netw,NodesPerArea,by="ToArea")
Container_netw[,numContainers:=numContainers/numNodes]
set(Container_netw, j=which(colnames(Container_netw) %in% c("ToArea","numNodes")), value=NULL )
}
# setkey(road_netw,FromNode)
###############################################################
## Calculate suitability of terrestrial habtitats #############
cat("\n Calculating suitability of habitats \n")
fpath<-system.file("extdata", package="CASPIAN")
LCdata <- readRDS(file.path(fpath,"LandCover_RailsRoadsInters_50m.rds"))
categories <- read.xlsx(file.path(fpath,"clc_legend_categories.xlsx"),sheet=2) # load new categories
categories <- categories[,c("GRID_CODE","LC_cat_ID")]
categories<-as.data.table(categories)
setkey(categories,LC_cat_ID)
setkey(species_preferences,LC_cat_ID)
categories <- species_preferences[categories]
### assign new land cover categories and species preferences
LCdata$LCtype <- categories$LC_cat_ID[match(LCdata$LC_ID,categories$GRID_CODE)] # assign new categories
LCdata$SpecPref <- categories$Species_preferences[match(LCdata$LC_ID,categories$GRID_CODE)] # assign new categories
LCdata$LCprop <- LCdata$prop * LCdata$SpecPref
## calculate suitability of habitats for each segment
LCdata <- as.data.table(LCdata)
road_segm_suit <- LCdata[,sum(LCprop),by=list(LinkID)]
road_segm_suit[V1>1,V1:=1]
## merge land cover suitability and road_netw
colnames(road_segm_suit) <- c("ID","LCsuit")
setkey(road_segm_suit,ID)
setkey(road_netw,ID)
road_netw <- road_segm_suit[road_netw]
###########################################################
## Combine all relevant data files ########################
cat("\n Assembling initialization object \n")
setkey(road_netw,Order)
roads_shp@data<-road_netw
if (incl_pallets==FALSE & incl_containers==FALSE){
init_obj<-list(roads_shp,init_segm)
names(init_obj)<-c("roads_shp","init_segm")
} else if (incl_pallets==FALSE & incl_containers==TRUE){
init_obj<-list(roads_shp,init_segm,Nodes_CargoCell,Container_netw)
names(init_obj)<-c("roads_shp","init_segm","Nodes_CargoCell","Container_netw")
} else if (incl_pallets==TRUE & incl_containers==FALSE){
init_obj<-list(roads_shp,init_segm,Nodes_CargoCell,Pallets_netw,init_Areas)
names(init_obj)<-c("roads_shp","init_segm","Nodes_CargoCell","Pallets_netw","init_Areas")
} else if (incl_pallets==TRUE & incl_containers==TRUE){
init_obj<-list(roads_shp,init_segm,Nodes_CargoCell,Container_netw,Pallets_netw,init_Areas)
names(init_obj)<-c("roads_shp","init_segm","Nodes_CargoCell","Container_netw","Pallets_netw","init_Areas")
}
if (save_init) {
cat("\n Saving initialization object \n")
save(init_obj, file = file.path(save_dir,file_init))
}
print(proc.time() - tmp2)
for(i in 1:length(init_obj)) assign(names(init_obj)[i], init_obj[[i]])
road_netw<-init_obj[["roads_shp"]]@data
nparset
nparset<-1
if (incl_containers==TRUE){
cat("\n Calculating Probability of Introduction by container for each node \n")
Container_netw[,Pi_container:=f_container(numContainers,parameters[nparset,"pall1"])]
Container_netw[,numContainers:=NULL]
# set(Container_netw, j=which(colnames(Container_netw) %in% c("numContainers")), value=NULL )
names(Container_netw)[1]<-c("ToNode")
setkey(Container_netw,ToNode)
setkey(road_netw,ToNode)
road_netw<-merge(road_netw,Container_netw,by="ToNode",all.x=T) # adding container state of ToNode
road_netw$ToNode <- as.character(road_netw$ToNode)
# road_netw[,stateToNode:=Pi_container]
#Filling NAs (some nodes are only from_nodes or to_nodes, or are not in the Cargo Areas)
road_netw[is.na(Pi_container),Pi_container:=0]
## ERROR check for Pi_container
if (is.numeric(road_netw[,Pi_container])==FALSE |
any(road_netw[,Pi_container<0]) | any(road_netw[,Pi_container>1])) {
assign(x = "road_netw",value = road_netw,envir = .GlobalEnv)
stop ("Problem in probability calculations: Pi_container either non-numeric or not in 0:1 range")
}
} else {
road_netw[,Pi_container:=0]
}
## Calculate Pintro for pallet flows #####################
if(incl_pallets==TRUE){
cat("\n Calculating Probability of Introduction for each Cargo area \n")
#Assigning probability to Cargo links for Pallets,
#using same kernel than containers with different parameterization:
Pallets_netw[,Pi_pallet:=f_container(numPallets,parameters[nparset,"pall1"])]
Pallets_netw[is.na(Pi_pallet),Pi_pallet:=0]
## ERROR check for pi_Pallet
if (is.numeric(Pallets_netw[,Pi_pallet])==FALSE |
any(Pallets_netw[,Pi_pallet<0]) | any(Pallets_netw[,Pi_pallet>1])) {
assign(x = "Pallets_netw",value = Pallets_netw,envir = .GlobalEnv)
stop ("Problem in probability calculations: Pi_pallet either non-numeric or not in 0:1 range")
}
}
##################################################################
# calculate Pintro (probability of introduction) for each network link
cat("\n Calculating Probability of Introduction for each segment \n")
## natural dispersal ########
if (incl_natural==TRUE){
road_netw[,p_natural:=f_natural(Length,parameters[nparset,"nat1"],parameters[nparset,"nat2"] )]
## ERROR check for p_natural
if (is.numeric(road_netw[,p_natural])==FALSE |
any(road_netw[,p_natural<0]) | any(road_netw[,p_natural>1])) {
assign(x = "road_netw",value = road_netw,envir = .GlobalEnv)
stop ("Problem in probability calculations: Pi_container either non-numeric or not in 0:1 range")
}
} else {road_netw[,p_natural:= 0]}
## attachment to vehicle ########
if (incl_attachment==TRUE) {
road_netw[,p_attach:=f_attach(Length,parameters[nparset,"att1"],parameters[nparset,"att2"],parameters[nparset,"att3"])]
road_netw[grep("S",road_netw$ID),p_attach:= 1-(1-p_attach)^(Traffic*parameters[nparset,"S_att0"])]
road_netw[grep("R",road_netw$ID),p_attach:= 1-(1-p_attach)^(Traffic*parameters[nparset,"R_att0"])]
## ERROR check for p_attach
if (is.numeric(road_netw[,p_attach])==FALSE |
any(road_netw[,p_attach<0]) | any(road_netw[,p_attach>1])) {
assign(x = "road_netw",value = road_netw,envir = .GlobalEnv)
stop ("Problem in probability calculations: p_attach either non-numeric or not in 0:1 range")
}
} else {road_netw[,p_attach:= 0]}
## airstream by motorvehicles and trains ########
if (incl_airflow==TRUE) {
road_netw[,p_airflow:=f_airflow(Length,parameters[nparset,"air2"],parameters[nparset,"air1"])] # parameters a and b are inverted on purpose, to accomodate an error in von der Lippe et al. 2013. See code for f_airflow
road_netw[grep("S",road_netw$ID),p_airflow:= 1-(1-p_airflow)^(Traffic*parameters[nparset,"S_air0"])] # new
road_netw[grep("R",road_netw$ID),p_airflow:= 1-(1-p_airflow)^(Traffic*parameters[nparset,"R_air0"])]
## ERROR check for p_airflow
if (is.numeric(road_netw[,p_airflow])==FALSE |
any(road_netw[,p_airflow<0]) | any(road_netw[,p_airflow>1])) {
assign(x = "road_netw",value = road_netw,envir = .GlobalEnv)
stop ("Problem in probability calculations: p_airflow either non-numeric or not in 0:1 range")
}
} else {road_netw[,p_airflow:= 0]}
road_netw[is.na(p_airflow),p_airflow:=0]
road_netw[is.na(p_attach),p_attach:=0]
road_netw[is.na(p_natural),p_natural:=0]
## Calculation of Pintro (Pi_traffi) depending on pathways selection above ########
road_netw[, Pi_traffic:=1-Reduce("*", 1-.SD), .SDcols=grep("p_",colnames(road_netw))] # new solution
##################################################################
# caculate probability of establishment for terrestrial habitats
cat("\n Calculating Probability of Establishment for each segment \n")
road_netw[,Pe:=parameters[nparset,"estT"]*LCsuit] # parameter for scaling down probability of establishment # new
road_netw[is.na(Pe),Pe:=0]
#road_netw[,Pe:=LCproportion(List=LCList,LandCoverID=LandCoverID)] #for test only! Needs additional merge() to match segment ID
## ERROR check for Pe
if (is.numeric(road_netw[,Pe])==FALSE |
any(road_netw[,Pe<0]) | any(road_netw[,Pe>1])) {
assign(x = "road_netw",value = road_netw,envir = .GlobalEnv)
stop ("Problem in probability calculations: Pe either non-numeric or not in 0:1 range")
}
## set data.table key for road network (much faster)
# And subset relevant information
road_netw_details <- road_netw[,c("ID","LCsuit","Length","Traffic","p_natural","p_attach","p_airflow","Order")]
set( road_netw, j=which(colnames(road_netw) %in% c("LCsuit","Length","Traffic","p_natural","p_attach","p_airflow","Order")), value=NULL ) # new
setkey(road_netw,FromNode)
incl_pallets
str(Pallets_netw)
Pallets_netw[,newarrivals2:=newarrivals]
# Pallets_netw[ind,newarrivals2:= 1-prod(1-(stateFromArea * Pi_pallet )) ,by=ToArea] # calculate pintro for each link
Pallets_netw[,newarrivals2:= 1-(stateFromArea * Pi_pallet ) ] # calculate pintro for each link # HANNO: Rearranged to separate 'by' from other operations
Pallets_netw[,newarrivals2:= 1-prod(newarrivals2) ,by=ToArea] # calculate pintro for each link # HANNO: Rearranged to separate 'by' from other operations
## ERROR check for declining newarrivals
if (any(Pallets_netw[,newarrivals2<newarrivals]) &
any((Pallets_netw[newarrivals2<newarrivals,newarrivals-newarrivals2])>10^-15)) {
assign(x = "Pallets_netw",value = Pallets_netw,envir = .GlobalEnv)
stop ("Problem in commodities probability calculations: Decline in newarrivals")
} else { Pallets_netw[,newarrivals:=newarrivals2] }
Pallets_netw[,newarrivals2:=NULL]
## update nodes #####################
## update stateToAreas #####
newstate_pall <- unique(Pallets_netw[,c("ToArea","stateToArea","newarrivals")]) # select single node (remove duplicates)
newstate_pall[,stateToArea2:=1-((1-stateToArea) * (1-newarrivals))] # update ToAreas with old and new state
## ERROR check for duplicated ToNodes (multiple probabilities assigned to the same node)
if (any(duplicated(newstate_pall$ToArea))) {
assign(x = "newstate_pall",value = newstate_pall,envir = .GlobalEnv)
stop ("Problem in node probability calculations: ToNode(s) with multiple probabilities")
}
## ERROR check for declining stateToArea #
if (any(newstate_pall[,stateToArea2<stateToArea]) &
any((newstate_pall[stateToArea2<stateToArea,stateToArea-stateToArea2])>10^-15)) {
assign(x = "newstate_pall",value = newstate_pall,envir = .GlobalEnv)
stop ("Problem in commodities probability calculations: Decline in stateToArea")
} else { newstate_pall[,stateToArea:=stateToArea2]}
newstate_pall[,c("newarrivals","stateToArea2"):=NULL]
str(newstate_pall)
str(Pallets_netw)
setnames(newstate_pall,c("ToArea","newstate"))# prepare file for merge (set names and key)
setkey(Pallets_netw,ToArea)
setkey(newstate_pall,ToArea)
Pallets_netw <- merge(Pallets_netw,newstate_pall,by="ToArea",all.x=T)
Pallets_netw[is.na(newstate),newstate:=0]
Pallets_netw[newstate>0 ,stateToArea:=newstate] # assigne new states to FromAreas
Pallets_netw[,newstate:=NULL] # remove column to avoid columns with the same names
str(Pallets_netw)
## Update stateFromArea
setnames(newstate_pall,c("FromArea","newstate"))# prepare file for merge (set names and key)
setkey(newstate_pall,FromArea)
setkey(Pallets_netw,FromArea)
Pallets_netw <- merge(Pallets_netw,newstate_pall,by="FromArea",all.x=T)
Pallets_netw[is.na(newstate),newstate:=0]
str(Pallets_netw)
## ERROR check for declining stateFromArea
if (any(Pallets_netw[newstate>0,newstate<stateFromArea]) &
any((Pallets_netw[newstate>0 & newstate<stateFromArea,stateFromArea-newstate])>10^-15) ) {
assign(x = "Pallets_netw",value = Pallets_netw,envir = .GlobalEnv)
stop ("Problem in commodities probability calculations: Decline in stateFromArea")
}
# Pallets_netw <- newstate[Pallets_netw] # merge Pallets_netw and newstate to update FromAreas states
Pallets_netw[newstate>0 ,stateFromArea:=newstate] # assigne new states to FromAreas
Pallets_netw[,newstate:=NULL] # remove column to avoid columns with the same names
str(Pallets_netw)
### Assign pallet probability (state of node) to each nodes in each area, and update traffic network here:
PalletsToNetw <- unique(Pallets_netw[,c("ToArea","stateToArea")])
# get ToNodes in ToAreas
setnames(PalletsToNetw,c("AreaPallet","stateToArea"))
str(Nodes_CargoCell)
str(CargoAreas)
cat("\n Initializing trade regions \n")
CargoAreas<-Commodities_shape_data
NodesCoords<-getNodesCoord(roads_shp)
coordinates(NodesCoords)<- ~ Long+Lat
proj4string(NodesCoords)<-proj4string(CargoAreas)
Nodes_CargoCell<-over(NodesCoords,CargoAreas)
str(Nodes_CargoCell)
?over
str(NodesCoords)
str(NodesCoords@data)
str(CargoAreas)
str(CargoAreas@data)
library(CASPIAN)
str(Commodities_shape_data)
data(Commodities_shape_data)
class(Cargo_shp)
str(Cargo_shp@data)
library(CASPIAN)
rm(list=ls())
graphics.off()
# library(rgdal) # only used for plotting
# library(sf)
# library(data.table)
# library(openxlsx)
# mainDir<-"C:/Users/mbagnara/Desktop/BiK-F postDoc/Model"
mainDir<-"/home/hanno/GitHub/AlienSpeciesSpread/CASPIAN"
setwd(mainDir)
configFile<-file.path(system.file("extdata", package="CASPIAN"),"configFile.R")
configFile<- "/home/hanno/Bioinvasion/EBAspread/Model/configFile.R"
#setwd("/home/hanno/Bioinvasion/EBAspread/Data/RoadData")
modelResults<-runCASPIAN(configFile=configFile)
str(road_netw)
source(configFile,local=TRUE)
# build parameter matrix
parameters<-matrix(c(par_att0_Roads,par_att0_Railways,par_att1,par_att2,par_att3,
par_air0_Roads,par_air0_Railways,par_air1,par_air2,
par_nat1,par_nat2,par_est_T,par_cont,par_pall,
par_mobile_proportion,par_stat_speed,par_mob_speed,
par_a,par_c1,par_g,par_c2,par_b,par_c3,par_est_W
),nrow=1,byrow=T)
colnames(parameters)<-c("S_att0", "R_att0","att1","att2","att3","S_air0","R_air0", "air1","air2","nat1","nat2","estT","cont1","pall1",
"mob_prop","stat_speed","mob_speed","alpha","c1","gamma","c2","beta","c3","estW")
#build land cover species preference matrix
species_preferences<- data.table(LC_cat_ID= 1:5,Species_preferences=c(Urban_areas,Arable_land,Pastures,Forests,Wetlands))
modelResults<-list()
init_coords=init_coords_T
num_iter=num_iter_T
max_dist = max_dist_T
iter_save = iter_save_T
traffic_type=c("all")
netw_type=c("all")
Pall_treshold <- 5
### load and format shapefiles (takes a while!) ######################################################
tmp2 <- proc.time()
####################################################################
### load road and railway network file #############################
cat("\n Loading network \n")
roads_shp<-Terrestrial_netw_data
colnames(roads_shp@data) <- c("FromNode","ToNode","Type","Length","cargo","passengers", "ID")
if (all(netw_type!=c("all"))) roads_shp<-roads_shp[roads_shp@data$Type%in%netw_type,]
road_netw <- as.data.table(roads_shp@data)
road_netw[,Order:=c(1:nrow(roads_shp@data))]
suppressWarnings(
if (all(traffic_type!=c("all"))) {
colTraffic<-which(colnames(road_netw)%in%traffic_type)
road_netw[,Traffic:=rowSums(road_netw[, ..colTraffic])]
} else {
road_netw[,Traffic:=rowSums(cbind(cargo,passengers))]
}
)
road_netw[,Traffic:=round((Traffic)*365/12,0)]
set(road_netw, j=which(colnames(road_netw) %in% c("cargo","passengers")), value=NULL )
if (any(road_netw[,Length==0])){ #assign length of 10m to segments with length 0
options(warn=1)
road_netw[Length==0,Length:=0.01]
warning("Links of length 0 detected in Terrestrial_netw_data. Their length has been set to 10m. ")
options(warn=0)
}
road_netw[,newarrivals:=0]
road_netw[,newarrivals:=as.numeric(newarrivals)]
road_netw[,stateFromNode:=0]
road_netw[,stateToNode:=0]
###############################################################
## Identify starting nodes ####################################
cat("\n Initializing node states \n")
## Identifying initial invasion segments
init_segm <- getNeighbourSegmCoord(shapeObj=roads_shp,init_coords=init_coords,max_dist=max_dist)
## Assigning initial state=1 to starting nodes ###################
init_nodes <- road_netw[ID%in%init_segm,c(FromNode,ToNode)] # new
road_netw[FromNode%in%init_nodes,stateFromNode:=1]
road_netw[ToNode%in%init_nodes,stateToNode:=1]
####################################################################
## identify nodes in each cargo area if commodities are considered
shapeObj <- roads_shp
res <- lapply(slot(shapeObj, "lines"), function(x) lapply(slot(x, "Lines"),function(y) slot(y, "coords")))
## extract first/last row of coordinates
from_node <- as.data.frame(do.call("rbind",lapply(lapply(res,"[[",1),function(s) s[dim(s)[1]-1,])),stringsAsFactors=F)
to_node   <- as.data.frame(do.call("rbind",lapply(lapply(res,"[[",1),function(s) s[dim(s)[1],])),stringsAsFactors=F)
from_node$nodeID <- shapeObj@data$FromNode
to_node$nodeID <- shapeObj@data$ToNode
allnodes <- merge(from_node,to_node,by="nodeID",all=T)
allnodes <- allnodes[!duplicated(allnodes[,c('nodeID')]),]
## node coordinates
nodeIDs<-allnodes[,1:3]
## fill NAs (some nodes are only to_nodes or only from_nodes)
nodeIDs[is.na(nodeIDs[,2]),2] <- allnodes[is.na(nodeIDs[,2]),4]
nodeIDs[is.na(nodeIDs[,3]),3] <- allnodes[is.na(nodeIDs[,3]),5]
#
colnames(nodeIDs)[2:3] <- c("Long","Lat")
head(nodeIDs)
res <- lapply(slot(shapeObj, "lines"), function(x) lapply(slot(x, "Lines"),function(y) slot(y, "coords")))
names(res)<-shapeObj@data$ID
segsID<-sapply(lapply(res,"[[",1),nrow)
coords<-as.data.frame(do.call("rbind",lapply(res,"[[",1)),stringsAsFactors=F)
colnames(coords)<- c("lon","lat")
coords$ID<-rep(names(segsID),segsID)
head(coords)
dim(coords)
dim(nodeIDs)
length(roads_shp)
res <- lapply(slot(shapeObj, "lines"), function(x) lapply(slot(x, "Lines"),function(y) slot(y, "coords")))
## extract first/last row of coordinates
from_node <- as.data.frame(do.call("rbind",lapply(lapply(res,"[[",1),function(s) s[dim(s)[1]-1,])),stringsAsFactors=F)
to_node   <- as.data.frame(do.call("rbind",lapply(lapply(res,"[[",1),function(s) s[dim(s)[1],])),stringsAsFactors=F)
from_node$nodeID <- shapeObj@data$FromNode
to_node$nodeID <- shapeObj@data$ToNode
head(from_node)
to_node$nodeID <- shapeObj@data$ToNode
allnodes <- merge(from_node,to_node,by="nodeID",all=T)
head(allnodes)
CargoAreas<-Commodities_shape_data
CargoAreas@data$AreaContainer <- as.character(CargoAreas@data$AreaContainer)
CargoAreas@data$AreaPallet <- as.character(CargoAreas@data$AreaPallet)
NodesCoords<-getNodesCoord(roads_shp)
coordinates(NodesCoords)<- ~ Long+Lat
proj4string(NodesCoords)<-proj4string(CargoAreas)
Nodes_CargoCell<-over(NodesCoords,CargoAreas)
Nodes_CargoCell<-as.data.table(cbind(Nodes_CargoCell,NodesCoords@data$nodeID))
setnames(Nodes_CargoCell,c(names(Nodes_CargoCell)[1:2],"NodeID"))
class(CargoAreas)
str(Nodes_CargoCell)
str(NodesCoords@data)
str(NodesCoords@data$nodeID)
Nodes_CargoCell<-as.data.table(cbind(Nodes_CargoCell,NodesCoords@data$nodeID))
str(Nodes_CargoCell)
cat("\n Initializing trade regions \n")
CargoAreas<-Commodities_shape_data
CargoAreas@data$AreaContainer <- as.character(CargoAreas@data$AreaContainer)
CargoAreas@data$AreaPallet <- as.character(CargoAreas@data$AreaPallet)
NodesCoords<-getNodesCoord(roads_shp)
coordinates(NodesCoords)<- ~ Long+Lat
proj4string(NodesCoords)<-proj4string(CargoAreas)
Nodes_CargoCell<-over(NodesCoords,CargoAreas)
str(Nodes_CargoCell)
str(NodesCoords@data)
library(CASPIAN)
rm(list=ls())
graphics.off()
# library(rgdal) # only used for plotting
# library(sf)
# library(data.table)
# library(openxlsx)
# mainDir<-"C:/Users/mbagnara/Desktop/BiK-F postDoc/Model"
mainDir<-"/home/hanno/GitHub/AlienSpeciesSpread/CASPIAN"
setwd(mainDir)
configFile<-file.path(system.file("extdata", package="CASPIAN"),"configFile.R")
configFile<- "/home/hanno/Bioinvasion/EBAspread/Model/configFile.R"
source(configFile,local=TRUE)
# build parameter matrix
parameters<-matrix(c(par_att0_Roads,par_att0_Railways,par_att1,par_att2,par_att3,
par_air0_Roads,par_air0_Railways,par_air1,par_air2,
par_nat1,par_nat2,par_est_T,par_cont,par_pall,
par_mobile_proportion,par_stat_speed,par_mob_speed,
par_a,par_c1,par_g,par_c2,par_b,par_c3,par_est_W
),nrow=1,byrow=T)
colnames(parameters)<-c("S_att0", "R_att0","att1","att2","att3","S_air0","R_air0", "air1","air2","nat1","nat2","estT","cont1","pall1",
"mob_prop","stat_speed","mob_speed","alpha","c1","gamma","c2","beta","c3","estW")
#build land cover species preference matrix
species_preferences<- data.table(LC_cat_ID= 1:5,Species_preferences=c(Urban_areas,Arable_land,Pastures,Forests,Wetlands))
modelResults<-list()
init_coords=init_coords_T
num_iter=num_iter_T
max_dist = max_dist_T
iter_save = iter_save_T
traffic_type=c("all")
netw_type=c("all")
Pall_treshold <- 5
####################################################################
### load road and railway network file #############################
cat("\n Loading network \n")
roads_shp<-Terrestrial_netw_data
colnames(roads_shp@data) <- c("FromNode","ToNode","Type","Length","cargo","passengers", "ID")
if (all(netw_type!=c("all"))) roads_shp<-roads_shp[roads_shp@data$Type%in%netw_type,]
road_netw <- as.data.table(roads_shp@data)
road_netw[,Order:=c(1:nrow(roads_shp@data))]
suppressWarnings(
if (all(traffic_type!=c("all"))) {
colTraffic<-which(colnames(road_netw)%in%traffic_type)
road_netw[,Traffic:=rowSums(road_netw[, ..colTraffic])]
} else {
road_netw[,Traffic:=rowSums(cbind(cargo,passengers))]
}
)
road_netw[,Traffic:=round((Traffic)*365/12,0)]
set(road_netw, j=which(colnames(road_netw) %in% c("cargo","passengers")), value=NULL )
if (any(road_netw[,Length==0])){ #assign length of 10m to segments with length 0
options(warn=1)
road_netw[Length==0,Length:=0.01]
warning("Links of length 0 detected in Terrestrial_netw_data. Their length has been set to 10m. ")
options(warn=0)
}
road_netw[,newarrivals:=0]
road_netw[,newarrivals:=as.numeric(newarrivals)]
road_netw[,stateFromNode:=0]
road_netw[,stateToNode:=0]
###############################################################
## Identify starting nodes ####################################
cat("\n Initializing node states \n")
cat("\n Initializing trade regions \n")
CargoAreas<-Commodities_shape_data
CargoAreas@data$AreaContainer <- as.character(CargoAreas@data$AreaContainer)
CargoAreas@data$AreaPallet <- as.character(CargoAreas@data$AreaPallet)
NodesCoords<-getNodesCoord(roads_shp)
coordinates(NodesCoords)<- ~ Long+Lat
proj4string(NodesCoords)<-proj4string(CargoAreas)
Nodes_CargoCell<-over(NodesCoords,CargoAreas)
str(Nodes_CargoCell)
Nodes_CargoCell<-as.data.table(cbind(Nodes_CargoCell,NodesCoords@data$nodeID))
str(Nodes_CargoCell)
Nodes_CargoCell<-as.data.table(cbind(Nodes_CargoCell,NodesCoords@data$nodeID,stringsAsFactors=F))
str(Nodes_CargoCell)
cat("\n Initializing trade regions \n")
CargoAreas<-Commodities_shape_data
CargoAreas@data$AreaContainer <- as.character(CargoAreas@data$AreaContainer)
CargoAreas@data$AreaPallet <- as.character(CargoAreas@data$AreaPallet)
NodesCoords<-getNodesCoord(roads_shp)
coordinates(NodesCoords)<- ~ Long+Lat
proj4string(NodesCoords)<-proj4string(CargoAreas)
Nodes_CargoCell<-over(NodesCoords,CargoAreas)
Nodes_CargoCell<-as.data.table(cbind(Nodes_CargoCell,NodesCoords@data$nodeID,stringsAsFactors=F))
str(Nodes_CargoCell)
# library(openxlsx)
# mainDir<-"C:/Users/mbagnara/Desktop/BiK-F postDoc/Model"
mainDir<-"/home/hanno/GitHub/AlienSpeciesSpread/CASPIAN"
setwd(mainDir)
configFile<-file.path(system.file("extdata", package="CASPIAN"),"configFile.R")
configFile<- "/home/hanno/Bioinvasion/EBAspread/Model/configFile.R"
#setwd("/home/hanno/Bioinvasion/EBAspread/Data/RoadData")
modelResults<-runCASPIAN(configFile=configFile)
incl_pallets
library(CASPIAN)
library(CASPIAN)
# Model to simulate the spread of propagules attached to motor vehicles
#
# requires the road network: 20180314_Verkehrsbelastungen2015_DTV (shapefile)
#############################################################################
rm(list=ls())
graphics.off()
# library(rgdal) # only used for plotting
# library(sf)
# library(data.table)
# library(openxlsx)
# mainDir<-"C:/Users/mbagnara/Desktop/BiK-F postDoc/Model"
mainDir<-"/home/hanno/GitHub/AlienSpeciesSpread/CASPIAN"
setwd(mainDir)
configFile<-file.path(system.file("extdata", package="CASPIAN"),"configFile.R")
configFile<- "/home/hanno/Bioinvasion/EBAspread/Model/configFile.R"
