road_netw[stateToNode>0 & stateToNode<stateFromNode,]
newstate <- unique(road_netw[ind,c("ToNode","stateToNode")],by="ToNode") # extract new state of ToNodes to update FromNodes states
newstate
setnames(newstate,c("FromNode","newstate")) # prepare file for merge (set names and key)
newstate[FromNode=="999100000",]
ind
road_netw[ind,c("ToNode","stateToNode")]
nrow(road_netw[ind,c("ToNode","stateToNode")])
unique(road_netw[ind,c("ToNode","stateToNode")],by="ToNode")
nrow(unique(road_netw[ind,c("ToNode","stateToNode")],by="ToNode"))
newstate <- as.data.table(aggregate(stateToNode ~ ToNode, road_netw[ind,], pUnion))
setnames(newstate,c("FromNode","newstate")) # prepare file for merge (set names and key)
setkey(newstate,FromNode)
setkey(road_netw,FromNode)
road_netw <- merge(road_netw,newstate,by="FromNode",all.x=T)
road_netw[is.na(newstate),newstate:=0]
road_netw[,newstate.x :=NULL]
road_netw[,newstate.y :=NULL]
newstate <- as.data.table(aggregate(stateToNode ~ ToNode, road_netw[ind,], pUnion))
unique(road_netw[ind,c("ToNode","stateToNode")],by="ToNode") # extract new state of ToNodes to update FromNodes states
setnames(newstate,c("FromNode","newstate")) # prepare file for merge (set names and key)
setkey(newstate,FromNode)
setkey(road_netw,FromNode)
road_netw <- merge(road_netw,newstate,by="FromNode",all.x=T)
road_netw[is.na(newstate),newstate:=0]
## error check for declining stateFromNode
if (any(road_netw[newstate>0,newstate<stateFromNode])) {
assign(x = "road_netw",value = road_netw,envir = .GlobalEnv)
stop ("Problem in spread probability calculations: Decline in stateFromNode")
}
output<-runCASPIAN("~/../Desktop/configFile.R")
road_netw[stateToNode>0 & stateToNode<stateFromNode,]
road_netw[newstate>0 & newstate<stateFromNode,]
newstate <- as.data.table(aggregate(stateToNode ~ ToNode, road_netw[ind,], pUnion))
nrow(newstate)
newstate
setkey(road_netw,ToNode)
road_netw[stateToNode>0 & stateToNode<stateFromNode,]
road_netw[newstate>0 & newstate<stateFromNode,]
table(road_netw$ToNode)
table(road_netw[stateToNode>0,ToNode])
newstate<-road_netw[ToNode=="999100887"]
newstate
output<-runCASPIAN("~/../Desktop/configFile.R")
newstate
road_netw[FromNode=="9991",]
road_netw[FromNode=="99910",]
road_netw[FromNode=="99910000",]
road_netw[FromNode=="99910001",]
road_netw[newstate<stateFromNode,]
road_netw[FromNode=="999100000",]
pUnion(c(3.674004e-05,3.674004e-05))
road_netw[ToNode=="999100000",]
newstate <- unique(road_netw[ind,c("ToNode","stateToNode","stateFromNode")],by="ToNode") # extract new state of ToNodes to update FromNodes states
newstate[,newstate:=pUnion(c(stateFromNode,stateFromNode))]
newstate<-newstate[,c("ToNode","newstate")]
newstate
newstate <- unique(road_netw[ind,c("ToNode","stateToNode","stateFromNode")],by="ToNode") # extract new state of ToNodes to update FromNodes states
newstate
newstate[,newstate:=pUnion(c(stateFromNode,stateFromNode))]
newstate
newstate[,newstate:=pUnion(stateFromNode,stateFromNode)]
newstate <- unique(road_netw[ind,c("ToNode","stateToNode","stateFromNode")],by="ToNode") # extract new state of ToNodes to update FromNodes states
newstate[,newstate:=pUnion(c(stateFromNode,stateToNode))]
newstate
sapply(newstate$stateToNode,newstate$stateFromNode,pUnion)
tapply(newstate$stateToNode,newstate$stateFromNode,pUnion)
sapply(newstate[,c("stateFromNode","stateToNode")],pUnion)
apply(newstate[,c("stateFromNode","stateToNode")],1,pUnion)
newstate <- unique(road_netw[ind,c("ToNode","stateToNode","stateFromNode")],by="ToNode") # extract new state of ToNodes to update FromNodes states
newstate[,newstate:=apply(newstate[,c("stateFromNode","stateToNode")],1,pUnion)]
newstate<-newstate[,c("ToNode","newstate")]
setnames(newstate,c("FromNode","newstate")) # prepare file for merge (set names and key)
setkey(newstate,FromNode)
setkey(road_netw,FromNode)
road_netw <- merge(road_netw,newstate,by="FromNode",all.x=T)
road_netw[is.na(newstate),newstate:=0]
road_netw[,newstate.x :=NULL]
road_netw[,newstate.y :=NULL]
newstate <- unique(road_netw[ind,c("ToNode","stateToNode","stateFromNode")],by="ToNode") # extract new state of ToNodes to update FromNodes states
newstate[,newstate:=apply(newstate[,c("stateFromNode","stateToNode")],1,pUnion)]
newstate<-newstate[,c("ToNode","newstate")]
setnames(newstate,c("FromNode","newstate")) # prepare file for merge (set names and key)
setkey(newstate,FromNode)
setkey(road_netw,FromNode)
road_netw <- merge(road_netw,newstate,by="FromNode",all.x=T)
road_netw[is.na(newstate),newstate:=0]
## error check for declining stateFromNode
if (any(road_netw[newstate>0,newstate<stateFromNode])) {
assign(x = "newstate",value = newstate,envir = .GlobalEnv)
assign(x = "road_netw",value = road_netw,envir = .GlobalEnv)
stop ("Problem in spread probability calculations: Decline in stateFromNode")
}
barplot(road_netw[,Pe]~road_netw[,Type])
barplot(road_netw[,c("Pe","Type")])
?barplot
barplot(road_netw[,Pe])
barplot(road_netw[,Pe])
x<-rep(1:10,3)
x
barplot(3)
barplot(x)
y<-rep(1:10,3)
x<-1:30
barplot(cbind(x,y))
barplot(cbind(x))
barplot(cbind(y))
barplot(x)
par(new=TRUE)
barplot(y)
dev.off()
barplot(y)
par(new=TRUE)
plot(x,y,pch=16)
output<-runCASPIAN("~/../Desktop/configFile.R")
newstate
road_netw[newstate<stateFromNode,]
road_netw[newstate>0 & newstate<stateFromNode,]
newstate<-road_netw[newstate>0 & newstate<stateFromNode,]
newstate
newstate
newstate[,ToNode=="999100000"]
newstate[ToNode=="999100000",]
newstate[ToNode=="999100044",]
unique(newstate[,FromNode])
road_netw[,ToNode]%in%unique(newstate[,FromNode])
road_netw[ToNode%in%FromNode,])
road_netw[ToNode%in%FromNode,]
init_data$roads_shp@data[stateFromNode<stateToNode,]
init_data$roads_shp@data[stateFromNode>stateToNode,]
road_netw[stateFromNode<stateToNode,]
road_netw[stateFromNode>stateToNode,]
setkey(road_netw,ToNode)
road_netw
newstate <- unique(road_netw[,c("ToNode","stateToNode")],by="ToNode") # extract new state of ToNodes to update FromNodes states
setnames(newstate,c("FromNode","newstate")) # prepare file for merge (set names and key)
setkey(newstate,FromNode)
setkey(road_netw,FromNode)
road_netw[,newstate:=NULL]
road_netw <- merge(road_netw,newstate,by="FromNode",all.x=T)
road_netw[is.na(newstate),newstate:=0]
## error check for declining stateFromNode
if (any(road_netw[newstate>0,newstate<stateFromNode])) {
assign(x = "newstate",value = newstate,envir = .GlobalEnv)
assign(x = "road_netw",value = road_netw,envir = .GlobalEnv)
stop ("Problem in spread probability calculations: Decline in stateFromNode")
}
setkey(newstate,ToNode)
setkey(road_netw,ToNode)
road_netw
road_netw[ToNode=="99999",]
road_netw[FromNode=="99999",]
road_netw[newstate<stateFromNode,]
road_netw[FromNode=="S722568",]
road_netw[ToNode=="S722568",]
road_netw[ToNode=="S294924",]
Container_netw
Container_netw<-init_data$Container_netw
Container_netw
init_data<-InitializeSpread(Terrestrial_netw_data=Terrestrial_netw_data,
Commodities_shape_data=Commodities_shape_data,
Pallets_netw_data=Pallets_netw_data,
Container_netw_data=Container_netw_data,
init_coords=init_coords,max_dist=max_dist,
netw_type=netw_type,save_init=save_init, save_dir=dir.name,file_init=file_init,
species_preferences=species_preferences,traffic_type=traffic_type,
incl_containers=incl_containers,incl_pallets=incl_pallets,
Cont_treshold=Cont_treshold,Pall_treshold=Cont_treshold)
for(i in 1:length(init_data)) assign(names(init_data)[i], init_data[[i]])
# roads_shp<-init_data$roads_shp
# init_segm<-init_data$init_segm
# if (incl_pallets==TRUE | incl_containers==TRUE){
#   Nodes_CargoCell<-init_data$Nodes_CargoCell
# }
# if (incl_containers==TRUE){
#   Container_netw<-init_data$Container_netw
# }
# if (incl_pallets==TRUE){
#   Pallets_netw<-init_data$Pallets_netw
#   init_Areas<-init_data$init_Areas
# }
road_netw<-roads_shp@data
Container_netw
Container_netw[,Pi_container:=f_container(numContainers,parameters[nparset,"pall1"])]
set(Container_netw, j=which(colnames(Container_netw) %in% c("numContainers")), value=NULL )
Container_netw
#Associate container probabilities to nodes
setkey(Container_netw,FromNode)
setkey(road_netw,FromNode)
road_netw<-merge(road_netw,Container_netw,by="FromNode",all.x=T) # adding container state of FromNo
road_netw[,stateFromNode:=Pi_container]
set(Container_netw, j=which(colnames(Container_netw) %in% c("Pi_container")), value=NULL )
names(Container_netw)[1]<-c("ToNode")
setkey(Container_netw,ToNode)
setkey(road_netw,ToNode)
road_netw<-merge(road_netw,Container_netw,by="ToNode",all.x=T) # adding container state of ToNode
road_netw[,stateToNode:=Pi_container]
for(i in 1:length(init_data)) assign(names(init_data)[i], init_data[[i]])
# roads_shp<-init_data$roads_shp
# init_segm<-init_data$init_segm
# if (incl_pallets==TRUE | incl_containers==TRUE){
#   Nodes_CargoCell<-init_data$Nodes_CargoCell
# }
# if (incl_containers==TRUE){
#   Container_netw<-init_data$Container_netw
# }
# if (incl_pallets==TRUE){
#   Pallets_netw<-init_data$Pallets_netw
#   init_Areas<-init_data$init_Areas
# }
road_netw<-roads_shp@data
cat("\n Calculating Probability of Introduction by container for each node \n")
Container_netw[,Pi_container:=f_container(numContainers,parameters[nparset,"pall1"])]
set(Container_netw, j=which(colnames(Container_netw) %in% c("numContainers")), value=NULL )
output<-runCASPIAN("~/../Desktop/configFile.R")
rm(list=ls())
output<-runCASPIAN("~/../Desktop/configFile.R")
road_netw
road_netw[stateToNode2<stateToNode,]
road_netw[stateToNode2<stateToNode,]
road_netw[stateToNode2<stateToNode,]
output<-runCASPIAN("~/../Desktop/configFile.R")
output<-runCASPIAN("~/../Desktop/configFile.R")
traceback()
rm(list=ls())
output<-runCASPIAN("~/../Desktop/configFile.R")
output<-runCASPIAN("~/../Desktop/configFile.R")
dev.off()
output<-runCASPIAN("~/../Desktop/configFile.R")
output<-runCASPIAN("~/../Desktop/configFile.R")
output<-runCASPIAN("~/../Desktop/configFile.R")
road_netw[stateToNode2<stateToNode,]
road_netw[stateToNode2<stateToNode,]
road_netw[,stateToNode2]-road_netw[,stateToNode]
any(road_netw[,stateToNode2]-road_netw[,stateToNode])<0
any((road_netw[,stateToNode2]-road_netw[,stateToNode])<0)
which((road_netw[,stateToNode2]-road_netw[,stateToNode])<0)
road_netw[which((road_netw[,stateToNode2]-road_netw[,stateToNode])<0),]
summary(road_netw[,stateToNode2]-road_netw[,stateToNode])
min(road_netw[,stateToNode2]-road_netw[,stateToNode])
trouble<-which((road_netw[,stateToNode2]-road_netw[,stateToNode])<0)
summary(road_netw[trouble,stateToNode2]-road_netw[trouble,stateToNode])
summary(road_netw[trouble,Pi_container])
road_netw[,stateToNode2:=stateToNode]
any(road_netw[,stateToNode2<stateToNode])
ind
ind <- which(road_netw$stateFromNode>0 & road_netw$stateToNode<1) # select links with non-empty start node and non-filled end node
road_netw[ind,stateToNode2:=1-(prod((1-stateToNode) * (1-newarrivals) * (1-Pi_container) * (1-stateToArea))),by=ToNode] # update ToNodes with old and new state
any(road_netw[,stateToNode2<stateToNode])
road_netw[,stateToNode2:=1-(prod((1-stateToNode2))),by=ToNode] # update ToNodes with old and new state
any(road_netw[,stateToNode2<stateToNode])
road_netw[,stateToNode2:=stateToNode]
road_netw[ind,stateToNode2:=1-(prod((1-stateToNode) * (1-newarrivals) * (1-Pi_container) * (1-stateToArea))),by=ToNode] # update ToNodes with old and new state
## error check for declining stateToNode
if (any(road_netw[,stateToNode2<stateToNode])) {
assign(x = "road_netw",value = road_netw,envir = .GlobalEnv)
stop ("Problem in spread probability calculations: Decline in stateToNode")
} else { road_netw[,stateToNode:=stateToNode2] }
road_netw[,stateToNode2:=NULL]
newstate <- unique(road_netw[,c("ToNode","stateToNode")],by="ToNode") # extract new state of ToNodes to update FromNodes states
setnames(newstate,c("FromNode","newstate")) # prepare file for merge (set names and key)
setkey(newstate,FromNode)
setkey(road_netw,FromNode)
road_netw <- merge(road_netw,newstate,by="FromNode",all.x=T)
road_netw[is.na(newstate),newstate:=0]
## error check for declining stateFromNode
if (any(road_netw[newstate>0,newstate<stateFromNode])) {
assign(x = "newstate",value = newstate,envir = .GlobalEnv)
assign(x = "road_netw",value = road_netw,envir = .GlobalEnv)
stop ("Problem in spread probability calculations: Decline in stateFromNode")
}
output<-runCASPIAN("~/../Desktop/configFile.R")
road_netw[stateFromNode>newstate,]
road_netw[stateFromNode>newstate,]
road_netw[ToNode=="999100683",]
output<-runCASPIAN("~/../Desktop/configFile.R")
road_netw[ToNode=="999100683",]
road_netw[stateFromNode>newstate,]
road_netw[ToNode=="999242",]
road_netw[FromNode=="999242",]
newstate <- unique(road_netw[ind,c("ToNode","stateToNode")],by="ToNode") # extract new state of ToNodes to update FromNodes states
setnames(newstate,c("FromNode","newstate")) # prepare file for merge (set names and key)
setkey(newstate,FromNode)
setkey(road_netw,FromNode)
road_netw <- merge(road_netw,newstate,by="FromNode",all.x=T)
road_netw[is.na(newstate),newstate:=0]
## error check for declining stateFromNode
if (any(road_netw[newstate>0,newstate<stateFromNode])) {
assign(x = "road_netw",value = road_netw,envir = .GlobalEnv)
stop ("Problem in spread probability calculations: Decline in stateFromNode")
}
road_netw[,newstate.x:=NULL]
road_netw[,newstate.y:=NULL]
newstate <- unique(road_netw[ind,c("ToNode","stateToNode")],by="ToNode") # extract new state of ToNodes to update FromNodes states
setnames(newstate,c("FromNode","newstate")) # prepare file for merge (set names and key)
setkey(newstate,FromNode)
setkey(road_netw,FromNode)
road_netw <- merge(road_netw,newstate,by="FromNode",all.x=T)
road_netw[is.na(newstate),newstate:=0]
## error check for declining stateFromNode
if (any(road_netw[newstate>0,newstate<stateFromNode])) {
assign(x = "road_netw",value = road_netw,envir = .GlobalEnv)
stop ("Problem in spread probability calculations: Decline in stateFromNode")
}
road_netw[,newstate:=NULL] # remove column to avoid columns with the same names
newstate <- unique(road_netw[,c("ToNode","stateToNode")],by="ToNode") # extract new state of ToNodes to update FromNodes states
setnames(newstate,c("FromNode","newstate")) # prepare file for merge (set names and key)
setkey(newstate,FromNode)
setkey(road_netw,FromNode)
road_netw <- merge(road_netw,newstate,by="FromNode",all.x=T)
road_netw[is.na(newstate),newstate:=0]
## error check for declining stateFromNode
if (any(road_netw[newstate>0,newstate<stateFromNode])) {
assign(x = "road_netw",value = road_netw,envir = .GlobalEnv)
stop ("Problem in spread probability calculations: Decline in stateFromNode")
}
s
s
newstate <-road_netw[,c("ToNode","stateToNode")] # extract new state of ToNodes to update FromNodes states
newstate<-as.data.table(aggregate(stateToNode ~ ToNode, newstate, pUnion))
newstate <-road_netw[ind,c("ToNode","stateToNode")] # extract new state of ToNodes to update FromNodes states
newstate<-as.data.table(aggregate(stateToNode ~ ToNode, newstate, pUnion))
setnames(newstate,c("FromNode","newstate")) # prepare file for merge (set names and key)
setkey(newstate,FromNode)
setkey(road_netw,FromNode)
road_netw <- merge(road_netw,newstate,by="FromNode",all.x=T)
road_netw[is.na(newstate),newstate:=0]
road_netw[,newstate.x:=NULL]
road_netw[,newstate.y:=NULL]
newstate <-road_netw[ind,c("ToNode","stateToNode")] # extract new state of ToNodes to update FromNodes states
newstate<-as.data.table(aggregate(stateToNode ~ ToNode, newstate, pUnion))
setnames(newstate,c("FromNode","newstate")) # prepare file for merge (set names and key)
setkey(newstate,FromNode)
setkey(road_netw,FromNode)
road_netw <- merge(road_netw,newstate,by="FromNode",all.x=T)
road_netw[is.na(newstate),newstate:=0]
## error check for declining stateFromNode
if (any(road_netw[newstate>0,newstate<stateFromNode])) {
assign(x = "road_netw",value = road_netw,envir = .GlobalEnv)
stop ("Problem in spread probability calculations: Decline in stateFromNode")
}
output<-runCASPIAN("~/../Desktop/configFile.R")
road_netw[stateFromNode>newstate,]
road_netw[ToNode=="999242",]
road_netw[FromNode=="999242",]
ind <- which(road_netw$stateFromNode>0 & road_netw$stateToNode<1) # select links with non-empty start node and non-filled end node
newstate <-road_netw[ind,c("ToNode","stateToNode")] # extract new state of ToNodes to update FromNodes states
newstate<-as.data.table(aggregate(stateToNode ~ ToNode, newstate, pUnion))
setnames(newstate,c("FromNode","newstate")) # prepare file for merge (set names and key)
setkey(newstate,FromNode)
setkey(road_netw,FromNode)
newstate
newstate[FromNode=="999242"]
newstate[FromNode=="999242",]
newstate <-road_netw[,c("ToNode","stateToNode")] # extract new state of ToNodes to update FromNodes states
newstate<-as.data.table(aggregate(stateToNode ~ ToNode, newstate, pUnion))
road_netw[,newstate:=NULL] # remove column to avoid columns with the same names
setnames(newstate,c("FromNode","newstate")) # prepare file for merge (set names and key)
setkey(newstate,FromNode)
setkey(road_netw,FromNode)
road_netw <- merge(road_netw,newstate,by="FromNode",all.x=T)
road_netw[is.na(newstate),newstate:=0]
## error check for declining stateFromNode
if (any(road_netw[newstate>0,newstate<stateFromNode])) {
assign(x = "road_netw",value = road_netw,envir = .GlobalEnv)
stop ("Problem in spread probability calculations: Decline in stateFromNode")
}
output<-runCASPIAN("~/../Desktop/configFile.R")
output<-runCASPIAN("~/../Desktop/configFile.R")
output<-runCASPIAN("~/../Desktop/configFile.R")
road_netw
road_netw[stateFromNode>newstate,]
road_netw[FromNode=="99910002" | ToNode=="99910002",]
road_netw[FromNode=="99910026" | ToNode=="99910026",]
road_netw[FromNode=="99910026" | ToNode=="99910026",stateFromNode-newstate]
road_netw[FromNode=="99910026" | ToNode=="99910026",stateToNode-Pi_container]
road_netw[FromNode=="99910026",newstate] - road_netw[ToNode=="99910026",stateToNode]
?format
?sprintf
option(digits)
options(digits)
options(digits)
option(digits=7)
options(digits=7)
output<-runCASPIAN("~/../Desktop/configFile.R")
road_netw[newstate>0,newstate]-road_netw[newstate>0,stateFromNode]
road_netw[newstate>0,stateFromNode]-road_netw[newstate>0,newstate]
summary(road_netw[newstate>0 & newstate<stateFromNode,stateFromNode]-road_netw[newstate>0 & newstate<stateFromNode,newstate])
any((road_netw[newstate>0 & newstate<stateFromNode,stateFromNode]-road_netw[newstate>0 & newstate<stateFromNode,newstate])>10^-15)
output<-runCASPIAN("~/../Desktop/configFile.R")
source('C:/Users/mbagnara/Desktop/configFile.R', encoding = 'UTF-8', echo=TRUE)
rm(list=ls())
output<-runCASPIAN("~/../Desktop/configFile.R")
output<-runCASPIAN("~/../Desktop/configFile.R")
library(CASPIAN)
output<-runCASPIAN("~/../Desktop/configFile.R")
output[[1]][[3]]$Pinv
Water_netw_data@data<-output[[1]][[3]]
plot(Water_netw_data)
library(CASPIAN)
output<-runCASPIAN("~/../Desktop/configFile.R")
plotResults(list_results=modelResults[["AcquaticResults"]][[3]],shapeObj=Water_netw_data,save_plot=save_plot,save_dir=dir.name)
plotResults(list_results=output[["AcquaticResults"]][[3]],shapeObj=Water_netw_data,save_plot=save_plot,save_dir=dir.name)
plotResults(list_results=output[["AcquaticResults"]][3],shapeObj=Water_netw_data,save_plot=save_plot,save_dir=dir.name)
init_coords
output<-runCASPIAN("~/../Desktop/configFile.R")
plot(Ship_Travel_Netw)
graphics.off()
plot(Ship_Travel_Netw)
Ship_Travel_Netw@data<-output[[1]][3]
Ship_Travel_Netw@data<-output[[1]][[3]]
plot(Ship_Travel_Netw,col="red",add=TRUE)
plot(border_dataset,add=T)
output[3]
output[[1]][3]
output[[]][3]
output[[2]][3]
summary(output[[2]][3])
waterOutput<-output[[2]][3]
summary(waterOutput)
waterOutput<-output[[1]][3]
summary(output[[1]][3])
waterOutput<-output[[2]][3]
summary(waterOutput)
summary(as.data.frame(waterOutput))
summary(waterOutput$Pinv)
waterOutput<-output[[2]][3]
waterOutput
waterOutput<-output[[1]][3]
waterOutput
waterOutput<-output[[2]][3]
waterOutput
# build parameter matrix
parameters<-matrix(c(par_att0_Roads,par_att0_Railways,par_att1,par_att2,par_att3,
par_air0_Roads,par_air0_Railways,par_air1,par_air2,
par_nat1,par_nat2,par_est,par_cont,par_pall,
par_mobile_proportion,par_stat_speed,par_mob_speed,
par_a,par_c1,par_g,par_c2,par_b,par_c3
),nrow=1,byrow=T)
colnames(parameters)<-c("S_att0", "R_att0","att1","att2","att3","S_air0","R_air0", "air1","air2","nat1","nat2","est0","cont1","pall1",
"mob_prop","stat_speed","mob_speed","a","c1","g","c2","b","c3")
#build land cover species preference matrix
species_preferences<- data.table(LC_cat_ID= 1:5,Species_preferences=c(Urban_areas,Arable_land,Pastures,Forests,Wetlands))
#running model:
modelResults<-list()
AcquaticModelResults<-WaterSpreadModel(parameters,
Water_netw_data=Water_netw_data,
traffic_type=traffic_type,
initialize = initialize, save_init = save_init, file_init = file_init,
init_coords=init_coords, num_iter=num_iter,max_dist = max_dist,
incl_biofouling=incl_biofouling,incl_natural_water=incl_natural_water,
makeplot = makeplot,save_plot=save_plot,iter_save = iter_save
)
init_data$init_segm
water_init_data<-InitializeWaterSpread(Water_netw_data=Water_netw_data,
init_coords=init_coords,max_dist=max_dist,
#netw_type=netw_type,
save_init=save_init, save_dir=dir.name,file_init=file_init,
#species_preferences=species_preferences,
traffic_type=traffic_type
)
water_init_data$init_segm
plot(water_init_data$water_shp)
plot(water_init_data$water_shp[ID%in%water_init_data$init_segm,],add=T,col="red")
plot(water_init_data$water_shp[water_init_data$init_segm%in%ID,],add=T,col="red")
plot(water_init_data$water_shp[water_init_data$water_shp@data$ID%in%water_init_data$init_segm,],add=T,col="red")
plot(border_dataset,add=T)
plot(water_init_data$water_shp[water_init_data$water_shp@data$ID%in%water_init_data$init_segm,],add=T,col="red")
plot(water_init_data$water_shp,col="blue")
plot(border_dataset,add=T)
plot(water_init_data$water_shp,col="blue",add=TRUE)
output<-runCASPIAN("~/../Desktop/configFile.R")
rm(list=ls())
output<-runCASPIAN("~/../Desktop/configFile.R")
rm(list=ls())
output<-runCASPIAN("~/../Desktop/configFile.R")
parameters<-matrix(c(par_att0_Roads,par_att0_Railways,par_att1,par_att2,par_att3,
par_air0_Roads,par_air0_Railways,par_air1,par_air2,
par_nat1,par_nat2,par_est,par_cont,par_pall,
par_mobile_proportion,par_stat_speed,par_mob_speed,
par_a,par_c1,par_g,par_c2,par_b,par_c3
),nrow=1,byrow=T)
colnames(parameters)<-c("S_att0", "R_att0","att1","att2","att3","S_air0","R_air0", "air1","air2","nat1","nat2","est0","cont1","pall1",
"mob_prop","stat_speed","mob_speed","a","c1","g","c2","b","c3")
#build land cover species preference matrix
species_preferences<- data.table(LC_cat_ID= 1:5,Species_preferences=c(Urban_areas,Arable_land,Pastures,Forests,Wetlands))
#running model:
dir.name<-file.path(getwd(),paste0("CASPIAN_",format(Sys.time(), "%d-%b-%Y %H-%M-%S")))
dir.create(dir.name)
modelResults<-list()
if(runAcquaticModel==TRUE){
cat("\n Running Acquatic Model \n")
AcquaticModelResults<-WaterSpreadModel(parameters,
Water_netw_data=Water_netw_data,
traffic_type=traffic_type,
initialize = initialize, save_init = save_init, file_init = file_init,
init_coords=init_coords, num_iter=num_iter,max_dist = max_dist,
incl_biofouling=incl_biofouling,incl_natural_water=incl_natural_water,
makeplot = makeplot,save_plot=save_plot,iter_save = iter_save
)
modelResults[["AcquaticResults"]]<-AcquaticModelResults
}
dir.name
if (makeplot) {
cat("\n Creating maps \n")
if (runTerrestrialModel){
plotResults(list_results=modelResults[["TerrestrialResults"]],shapeObj=Terrestrial_netw_data,save_plot=save_plot,save_dir=dir.name)
}
if (runAcquaticModel){
plotResults(list_results=modelResults[["AcquaticResults"]],shapeObj=Water_netw_data,save_plot=save_plot,save_dir=dir.name)
}
}
