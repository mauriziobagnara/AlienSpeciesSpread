#   road_netw[ID%in%init_segm[[as.character(t)]],Pinv:=1]
# }
ind <- which(road_netw$stateFromNode>0 & road_netw$stateToNode<1) # select links with non-empty start node and non-filled end node
road_netw[ind,newarrivals:=   1-prod(1-(stateFromNode * Pi)) ,by=ToNode] # calculate pintro for each link
road_netw[ind,stateToNode:=1-(prod((1-stateToNode) * (1-newarrivals))),by=ToNode] # update ToNodes with old and new state
# road_netw[ind,stateToNode:=1-(prod((1-stateToNode) * (1-   1-prod(1-(stateFromNode * Pi)) ))),by=ToNode] # calculate pintro for each link
newstate <- unique(road_netw[ind,c("ToNode","stateToNode")],by="ToNode") # extract new state of ToNodes to update FromNodes states
setnames(newstate,c("FromNode","newstate")) # prepare file for merge (set names and key)
setkey(newstate,FromNode)
road_netw <- merge(road_netw,newstate,by="FromNode",all.x=T)
# road_netw <- newstate[road_netw] # merge road_netw and newstate to update FromNodes states
road_netw[newstate>0,stateFromNode:=newstate] # assigne new states to FromNodes
road_netw[,newstate:=NULL] # remove column to avoid columns with the same names
#  node_state_sub <- node_state[state>0,] # take a subset of occupied nodes, required to speed up 'merge' below
#
#  nextnodes <- road_netw[FromNode%in%node_state_sub$FromNode] # identify next nodes
#
# nextnodes <- merge(nextnodes,node_state_sub,by="FromNode") # merge old states and next nodes
#
# newstate <- nextnodes[,1-prod(1-(state * Pi)),by=ToNode] # combine all probs arriving at the same node from different nodes
#
# node_state[.(newstate$ToNode),newarrivals:=newstate$V1] # add new state to nodes file
# node_state[,state:=1-((1-state)*(1-newarrivals))]   # combine old and new state
#
# road_netw<-merge(road_netw,node_state[,1:2],by="FromNode")
#
# #combine all probabilities to Pinv
# iters<-as.numeric(names(init_segm))
# road_netw[!ID%in%as.character(unlist(init_segm[c(which(iters<t))])),Pinv:=Pe*(1-Pi)*state]
# road_netw[,state_node:=state]
# road_netw[,state:=NULL]
# store results
if (t%in%iter_save) {
road_netw[,Pinv:=Pe*Pi] # calculate total probability for links
road_netw[ID%in%init_segm,Pinv:=1] # assigning Pinv=1 for initial links. No effect on spread dynamics (use nodes).
setkey(road_netw,ID)
setkey(road_netw_details,ID)
road_netw_out <- road_netw_details[road_netw]
modelList[[as.character(t)]]<-road_netw_out
if ("stateFromNode"%in%colnames(modelList[[as.character(t)]])==FALSE){
stop ("no stateFromNode column")
}
}
#update progress bar
info <- sprintf("%d%% done", round((t/num_iter)*100))
setTxtProgressBar(pb, t/(100)*100, label=info)
}
}
close(pb)
parameters<-matrix(c(par_att0,par_att1,par_att2,par_att3,par_air1,par_air2,par_nat1,par_nat2,par_est,par_air0),nrow=1,byrow=T)
colnames(parameters)<-c("att0", "att1","att2","att3", "air1","air2","nat1","nat2","est0","air0")
for (nparset in nrow(parameters)){
#get PI for segment
cat("\n Calculating Probability of Introduction for each segment \n")
if (incl_natural){
road_netw[,p_natural:=f_natural(Length,parameters[nparset,"nat1"],parameters[nparset,"nat2"] )]
}
if (incl_attachment) {
road_netw[,p_attach:=f_attach(Length,parameters[nparset,"att1"],parameters[nparset,"att2"],parameters[nparset,"att3"])]
road_netw[,p_attach:= 1-(1-p_attach)^(Traffic*parameters[nparset,"att0"])]
}
if (incl_airflow) {
road_netw[,p_airflow:=f_airflow(Length,parameters[nparset,"air1"],parameters[nparset,"air2"])]
road_netw[,p_airflow:= 1-(1-p_airflow)^(Traffic*parameters[nparset,"air0"])] # new
}
road_netw[, Pi:=1-Reduce("*", 1-.SD), .SDcols=grep("p_",colnames(road_netw))] # new solution
# col_prob<-road_netw[,.SD,.SDcols=grep("p_",colnames(road_netw))] # see above new solution
#
# road_netw[,Pi:=apply(col_prob,1,pUnion)] #prod by row
#get PE for segment
cat("\n Calculating Probability of Establishment for each segment \n")
# new    # LCprop<-LCproportion(IDs=unique(road_netw$ID),List=LClist,LandCoverID=LandCoverID) #requires LClist, provided as internal data in data/LClist.rda
#    road_netw[,list(road_netw,LCprop)]
# new    if (restart==TRUE){road_netw[,Pe:=NULL]}
# new    road_netw<- merge(road_netw,LCprop,by="ID", all=TRUE,sort=FALSE)
#road_netw[,Pe:=1-exp(-parameters[nparset,"est0"]*LCsuit)] # parameter for scaling down probability of establishment # new
road_netw[,Pe:=parameters[nparset,"est0"]*LCsuit] # parameter for scaling down probability of establishment # new
#road_netw[,Pe:=LCproportion(List=LCList,LandCoverID=LandCoverID)] #for test only! Needs additional merge() to match segment ID
## set data.table key for road network (much faster)
road_netw_details <- road_netw[,c("ID","LCsuit","Length","Traffic","p_natural","p_attach","p_airflow")]
set( road_netw, j=which(colnames(road_netw) %in% c("LCsuit","Length","Type","Traffic","p_natural","p_attach","p_airflow")), value=NULL ) # new
setkey(road_netw,FromNode)
road_netw[,stateFromNode:=0]          # state of FromNode
road_netw[,stateToNode:=0]    # state of ToNode
road_netw[,newarrivals:=0]    # pintro for single links
road_netw[FromNode%in%node_state[state>0,FromNode],stateFromNode:=1] # initialise states of FromNodes
road_netw[ToNode%in%node_state[state>0,FromNode],stateToNode:=1] # initialise states of ToNodes
##### start simulation ############################################
### select next nodes #############################
# ## first step ####
# nextnodes <- road_netw[FromNode%in%node_state[state>0,FromNode]] # identify next nodes
# nextnodes <- nextnodes[node_state, nomatch=0] # get states of all nodes
# newstate <- nextnodes$state * a0 * nextnodes$Length * nextnodes$Traffic # prob to reach nodes
# node_state[FromNode%in%nextnodes$ToNode,state:=newstate] # assigne new values
## subsequent steps ######
cat("\n Ongoing Simulation \n")
#setup progress bar
pb <- txtProgressBar(title = "Simulation state", label = "0% done",min=0, max=num_iter, initial=0,style = 3)
modelList<- list()
for (t in 1:num_iter){#num_iter
# if (t%in%names(init_segm)){ # note: t can never be in init_segm ???
#   init_nodes <- road_netw[ID%in%init_segm[[as.character(t)]],c(FromNode,ToNode)]
#   node_state[FromNode%in%init_nodes,state:=1]
#   road_netw[ID%in%init_segm[[as.character(t)]],Pinv:=1]
# }
ind <- which(road_netw$stateFromNode>0 & road_netw$stateToNode<1) # select links with non-empty start node and non-filled end node
road_netw[ind,newarrivals:=   1-prod(1-(stateFromNode * Pi)) ,by=ToNode] # calculate pintro for each link
road_netw[ind,stateToNode:=1-(prod((1-stateToNode) * (1-newarrivals))),by=ToNode] # update ToNodes with old and new state
# road_netw[ind,stateToNode:=1-(prod((1-stateToNode) * (1-   1-prod(1-(stateFromNode * Pi)) ))),by=ToNode] # calculate pintro for each link
newstate <- unique(road_netw[ind,c("ToNode","stateToNode")],by="ToNode") # extract new state of ToNodes to update FromNodes states
setnames(newstate,c("FromNode","newstate")) # prepare file for merge (set names and key)
setkey(newstate,FromNode)
road_netw <- merge(road_netw,newstate,by="FromNode",all.x=T)
# road_netw <- newstate[road_netw] # merge road_netw and newstate to update FromNodes states
road_netw[newstate>0,stateFromNode:=newstate] # assigne new states to FromNodes
road_netw[,newstate:=NULL] # remove column to avoid columns with the same names
#  node_state_sub <- node_state[state>0,] # take a subset of occupied nodes, required to speed up 'merge' below
#
#  nextnodes <- road_netw[FromNode%in%node_state_sub$FromNode] # identify next nodes
#
# nextnodes <- merge(nextnodes,node_state_sub,by="FromNode") # merge old states and next nodes
#
# newstate <- nextnodes[,1-prod(1-(state * Pi)),by=ToNode] # combine all probs arriving at the same node from different nodes
#
# node_state[.(newstate$ToNode),newarrivals:=newstate$V1] # add new state to nodes file
# node_state[,state:=1-((1-state)*(1-newarrivals))]   # combine old and new state
#
# road_netw<-merge(road_netw,node_state[,1:2],by="FromNode")
#
# #combine all probabilities to Pinv
# iters<-as.numeric(names(init_segm))
# road_netw[!ID%in%as.character(unlist(init_segm[c(which(iters<t))])),Pinv:=Pe*(1-Pi)*state]
# road_netw[,state_node:=state]
# road_netw[,state:=NULL]
# store results
if (t%in%iter_save) {
road_netw[,Pinv:=Pe*Pi] # calculate total probability for links
road_netw[ID%in%init_segm,Pinv:=1] # assigning Pinv=1 for initial links. No effect on spread dynamics (use nodes).
setkey(road_netw,ID)
setkey(road_netw_details,ID)
road_netw_out <- road_netw_details[road_netw]
modelList[[as.character(t)]]<-road_netw_out
if ("stateFromNode"%in%colnames(modelList[[as.character(t)]])==FALSE){
stop ("no stateFromNode column")
}
}
#update progress bar
info <- sprintf("%d%% done", round((t/num_iter)*100))
setTxtProgressBar(pb, t/(100)*100, label=info)
}
}
close(pb)
roads_shp@data<-road_netw
plot(roads_shp[roads_shp@data$ID%in%init_data$init_segm,],col="blue",add=TRUE)
roads_shp<-init_data$roads_shp
road_netw<-roads_shp@data
init_segm<-init_data$init_segm
node_state<-init_data$node_state
plot(roads_shp[roads_shp@data$ID%in%init_data$init_segm,],col="orange",add=TRUE)
plot(roads_shp[roads_shp@data$ID%in%init_segm,],col="orange",add=TRUE)
plot(border_dataset)
plot(init_data$roads_shp[init_data$roads_shp@data$ID%in%init_data$init_segm,],col="red",add=TRUE)
plot(init_data$roads_shp[init_data$init_segm%in%init_data$roads_shp@data$ID,],col="red",add=TRUE)
roads_shp<-Road_Railway_Network
#roads_shp@data$ID<-paste(roads_shp@data$Von_Knoten,roads_shp@data$Nach_Knote,sep="_")
#roads_shp@data[, c(4,6,7)]<-sapply(roads_shp@data[, c(4,6,7)], as.numeric)
colnames(roads_shp@data) <- c("FromNode","ToNode","Type","Length","Traffic","ID")
head(roads_shp)
head(roads_shp@data)
if (all(road_type!=c("all"))) roads_shp<-roads_shp[roads_shp@data$Type%in%road_type,]
head(roads_shp@data)
road_netw <- as.data.table(roads_shp@data)
road_netw[,Traffic:=round((Traffic)*365/12,0)]
head(road_netw)
node_state <- as.data.table(unique(c(road_netw[,unique(FromNode)],road_netw[,unique(ToNode)])))
node_state[,state:=0]
node_state[,newarrivals:=0]
names(node_state) <- c("FromNode","state","newarrivals")
node_state[,newarrivals:=as.numeric(newarrivals)]
setkey(node_state,FromNode)
init_segm <- getNeighbourSegmCoord(shapeObj=roads_shp,init_coords=init_coords,max_dist=max_dist)
init_segm
init_nodes <- road_netw[ID%in%init_segm,c(FromNode,ToNode)] # new
init_nodes
node_state[FromNode%in%init_nodes,state:=1]
fpath<-system.file("extdata", package="CASPIAN")
LCdata <- readRDS(file.path(fpath,"LandCover_RailsRoadsInters_50m.rds"))
categories <- read.xlsx(file.path(fpath,"clc_legend_categories.xlsx"),sheet=2) # load new categories
categories <- categories[,c("GRID_CODE","LC_cat_ID")]
categories<-as.data.table(categories)
setkey(categories,LC_cat_ID)
setkey(species_preferences,LC_cat_ID)
categories <- species_preferences[categories]
### assign new land cover categories and species preferences
LCdata$LCtype <- categories$LC_cat_ID[match(LCdata$LC_ID,categories$GRID_CODE)] # assign new categories
LCdata$SpecPref <- categories$Species_preferences[match(LCdata$LC_ID,categories$GRID_CODE)] # assign new categories
LCdata$LCprop <- LCdata$prop * LCdata$SpecPref
## calculate suitability of habitats for each segment
LCdata <- as.data.table(LCdata)
road_segm_suit <- LCdata[,sum(LCprop),by=list(LinkID)]
road_segm_suit[V1>1,V1:=1]
## merge land cover suitability and road_netw
colnames(road_segm_suit) <- c("ID","LCsuit")
setkey(road_segm_suit,ID)
setkey(road_netw,ID)
road_netw <- road_segm_suit[road_netw]
head(road_netw)
roads_shp<-Road_Railway_Network
#roads_shp@data$ID<-paste(roads_shp@data$Von_Knoten,roads_shp@data$Nach_Knote,sep="_")
#roads_shp@data[, c(4,6,7)]<-sapply(roads_shp@data[, c(4,6,7)], as.numeric)
colnames(roads_shp@data) <- c("FromNode","ToNode","Type","Length","Traffic","ID")
if (all(road_type!=c("all"))) roads_shp<-roads_shp[roads_shp@data$Type%in%road_type,]
road_netw <- as.data.table(roads_shp@data)
road_netw[,Traffic:=round((Traffic)*365/12,0)]
#road_netw <- road_netw[,.(Von_Knoten,Nach_Knote,Laenge,Typ, Traffic,ID)]
## add opposite direction (only mean values in both directions are provided so far)
# road_netw_otherdir <- road_netw
# names(road_netw_otherdir) <- c("FromNode","ToNode","Length","Type","Traffic")
# road_netw_otherdir[,ToNode:=road_netw[,FromNode]]
# road_netw_otherdir[,FromNode:=road_netw[,ToNode]]
# road_netw <- rbind(road_netw,road_netw_otherdir)
## transform measures into a single dispersal probability
# Events are considered non mutually exclusive.
#road_netw[,disp:=0]
# if (include_traffic) {road_netw[,p_traff:=f_traff(Traffic,traf1)]
# road_netw[,disp:=disp+p_traff]
# }
### node file #####################################
cat("\n Initialising node states \n")
node_state <- as.data.table(unique(c(road_netw[,unique(FromNode)],road_netw[,unique(ToNode)])))
node_state[,state:=0]
node_state[,newarrivals:=0]
names(node_state) <- c("FromNode","state","newarrivals")
node_state[,newarrivals:=as.numeric(newarrivals)]
setkey(node_state,FromNode)
###############################################################
cat("\n Identifying initial invasion segments \n")
init_segm <- getNeighbourSegmCoord(shapeObj=roads_shp,init_coords=init_coords,max_dist=max_dist)
init_nodes <- road_netw[ID%in%init_segm,c(FromNode,ToNode)] # new
node_state[FromNode%in%init_nodes,state:=1]
# road_netw[ID%in%init_segm,Pinv:=1] # new, necessary???
############################################################### # new
cat("\n Calculating suitability of habitats \n")
fpath<-system.file("extdata", package="CASPIAN")
LCdata <- readRDS(file.path(fpath,"LandCover_RailsRoadsInters_50m.rds"))
categories <- read.xlsx(file.path(fpath,"clc_legend_categories.xlsx"),sheet=2) # load new categories
categories <- categories[,c("GRID_CODE","LC_cat_ID")]
categories<-as.data.table(categories)
setkey(categories,LC_cat_ID)
setkey(species_preferences,LC_cat_ID)
categories <- species_preferences[categories]
### assign new land cover categories and species preferences
LCdata$LCtype <- categories$LC_cat_ID[match(LCdata$LC_ID,categories$GRID_CODE)] # assign new categories
LCdata$SpecPref <- categories$Species_preferences[match(LCdata$LC_ID,categories$GRID_CODE)] # assign new categories
LCdata$LCprop <- LCdata$prop * LCdata$SpecPref
## calculate suitability of habitats for each segment
LCdata <- as.data.table(LCdata)
road_segm_suit <- LCdata[,sum(LCprop),by=list(LinkID)]
road_segm_suit[V1>1,V1:=1]
## merge land cover suitability and road_netw
colnames(road_segm_suit) <- c("ID","LCsuit")
setkey(road_segm_suit,ID)
setkey(road_netw,ID)
road_netw2 <- road_segm_suit[road_netw,sort=FALSE]
road_netw2 <- merge(road_netw,road_segm_suit,by="ID",sort=FALSE)
head(road_netw2)
head(road_netw)
head(roads_shp@data)
roads_shp<-Road_Railway_Network
#roads_shp@data$ID<-paste(roads_shp@data$Von_Knoten,roads_shp@data$Nach_Knote,sep="_")
#roads_shp@data[, c(4,6,7)]<-sapply(roads_shp@data[, c(4,6,7)], as.numeric)
colnames(roads_shp@data) <- c("FromNode","ToNode","Type","Length","Traffic","ID")
if (all(road_type!=c("all"))) roads_shp<-roads_shp[roads_shp@data$Type%in%road_type,]
road_netw <- as.data.table(roads_shp@data)
road_netw[,Traffic:=round((Traffic)*365/12,0)]
head(road_netw)
node_state <- as.data.table(unique(c(road_netw[,unique(FromNode)],road_netw[,unique(ToNode)])))
node_state[,state:=0]
node_state[,newarrivals:=0]
names(node_state) <- c("FromNode","state","newarrivals")
node_state[,newarrivals:=as.numeric(newarrivals)]
setkey(node_state,FromNode)
head(road_netw)
init_segm <- getNeighbourSegmCoord(shapeObj=roads_shp,init_coords=init_coords,max_dist=max_dist)
head(road_netw)
init_nodes <- road_netw[ID%in%init_segm,c(FromNode,ToNode)] # new
head(road_netw)
node_state[FromNode%in%init_nodes,state:=1]
head(road_netw)
fpath<-system.file("extdata", package="CASPIAN")
LCdata <- readRDS(file.path(fpath,"LandCover_RailsRoadsInters_50m.rds"))
categories <- read.xlsx(file.path(fpath,"clc_legend_categories.xlsx"),sheet=2) # load new categories
categories <- categories[,c("GRID_CODE","LC_cat_ID")]
categories<-as.data.table(categories)
setkey(categories,LC_cat_ID)
setkey(species_preferences,LC_cat_ID)
categories <- species_preferences[categories]
head(road_netw)
LCdata$LCtype <- categories$LC_cat_ID[match(LCdata$LC_ID,categories$GRID_CODE)] # assign new categories
LCdata$SpecPref <- categories$Species_preferences[match(LCdata$LC_ID,categories$GRID_CODE)] # assign new categories
LCdata$LCprop <- LCdata$prop * LCdata$SpecPref
head(road_netw)
LCdata <- as.data.table(LCdata)
road_segm_suit <- LCdata[,sum(LCprop),by=list(LinkID)]
road_segm_suit[V1>1,V1:=1]
head(road_netw)
## merge land cover suitability and road_netw
colnames(road_segm_suit) <- c("ID","LCsuit")
head(road_segm_suit)
setkey(road_segm_suit,ID)
head(road_segm_suit)
str(road_segm_suit)
?setkey
# setkey(road_segm_suit,ID)
# setkey(road_netw,ID)
road_netw2 <- merge(road_netw,road_segm_suit,by="ID",sort=FALSE)
head(road_netw)
source('~/GitHub/AlienSpeciesSpread/CASPIAN/R/InitializeSpread.R', echo=TRUE)
init_data<-InitializeSpread(init_coords=init_coords,max_dist=max_dist,
road_type=road_type,save_init=save_init, save_dir="~/../Desktop/",file_init=file_init,       species_preferences=species_preferences)
plot(border_dataset)
x11()
plot(border_dataset)
plot(roads_shp[roads_shp@data$ID%in%init_data$init_segm,],col="orange",add=TRUE)
plot(init_data$roads_shp[init_data$roads_shp@data$ID%in%init_data$init_segm,],col="red",add=TRUE)
?merge
runCASPIAN("~/../Desktop/configFile.R")
runCASPIAN("~/../Desktop/configFile.R")
source('~/GitHub/AlienSpeciesSpread/CASPIAN/R/SpreadModel.R', echo=TRUE)
runCASPIAN("~/../Desktop/configFile.R")
x(1:10)
x<-(1:10)
sort(x)
x<-(1:100)
sort(x)
rownames(roads_shp)
rownames(roads_shp@data)
?data.table
data.frame(l=letters(),n=c(1:26))
data.frame(l=c(a:z),n=c(1:26))
letters
data.frame(l=letters,n=c(1:26))
test<-data.frame(l=letters,n=c(1:26))
test<-data.table(l=letters,n=c(1:26))
test<-data.frame(l=letters,n=c(1:26))
test<-data.table(l=letters,n=c(1:26))
test
setkey(test,n)
test
?sample
test<-data.table(l=letters,n=sample(x=c(1:26), size=26, replace = FALSE))
test
setkey(test,n)
test
runCASPIAN("~/../Desktop/configFile.R")
runCASPIAN("~/../Desktop/configFile.R")
runCASPIAN("~/../Desktop/configFile.R")
CASPIANresults<- runCASPIAN("~/../Desktop/configFile.R")
CASPIANresults<-CASPIANresults[2]
CASPIANresults<-CASPIANresults$50
CASPIANresults<-CASPIANresults$"50"
CASPIANresults$ID%in%"S"
CASPIANresults$ID%in%"R"
"R"%in%CASPIANresults$ID
grep("R",CASPIANresults$ID)
unique(Road_Railway_Network@data$Typ)
runCASPIAN("~/../Desktop/configFile.R")
source('C:/Users/mbagnara/Desktop/configFile.R', encoding = 'UTF-8', echo=TRUE)
parameters<-matrix(c(par_att0_Roads,par_att0_Railways,par_att1,par_att2,par_att3,,par_air0_Roads,par_air0_Railways,par_air1,par_air2,par_nat1,par_nat2,par_est),nrow=1,byrow=T)
par_att0_Roads
runCASPIAN("~/../Desktop/configFile.R")
runCASPIAN("~/../Desktop/configFile.R")
CASPIANresults<-runCASPIAN("~/../Desktop/configFile.R")
CargoFlow<-readOGR(dsn = "C:\Users\mbagnara\Dropbox\AlienSpeciesSpread\Data\CargoFlows", layer="DModell_SSP_7334")
CargoFlow<-readOGR(dsn = "C:/Users/mbagnara/Dropbox/AlienSpeciesSpread/Data/CargoFlows", layer="DModell_SSP_7334")
plot(CargoFlow)
x11()
plot(border_dataset)
plot(CargoFlow,add=TRUE)
str(CargoFlow$codeLfdnr)
str(CargoFlow)
str(CargoFlow@data)
head(CargoFlow@data)
head(CargoFlow@data,100)
hist(CargoFlow@data$codeLfdnr,nclass=100)
hist(as.numeric(as.character(CargoFlow@data$codeLfdnr)),nclass=100)
str(CargoFlow)
library(Matrix)
Container<-readMM("C:/Users/mbagnara/Dropbox/AlienSpeciesSpread/Data/CargoFlows/containerTotal.mtx")
Container<-readHB("C:/Users/mbagnara/Dropbox/AlienSpeciesSpread/Data/CargoFlows/containerTotal.mtx")
Container<-read.table("C:/Users/mbagnara/Dropbox/AlienSpeciesSpread/Data/CargoFlows/containerTotal.mtx")
Container<-read.table("C:/Users/mbagnara/Dropbox/AlienSpeciesSpread/Data/CargoFlows/containerTotal.mtx",h=T)
Container<-read.MM("C:/Users/mbagnara/Dropbox/AlienSpeciesSpread/Data/CargoFlows/containerTotal.mtx")
library(import)
install.packages("import")
library(import)
Container<-import::read.MM("C:/Users/mbagnara/Dropbox/AlienSpeciesSpread/Data/CargoFlows/containerTotal.mtx")
?read.MM
??read.MM
install.packages("spam")
library(spam)
Container<-read.MM("C:/Users/mbagnara/Dropbox/AlienSpeciesSpread/Data/CargoFlows/containerTotal.mtx")
Container<-read.HB("C:/Users/mbagnara/Dropbox/AlienSpeciesSpread/Data/CargoFlows/containerTotal.mtx")
Container<-read.MM("C:/Users/mbagnara/Dropbox/AlienSpeciesSpread/Data/CargoFlows/palettenTotal.mtx")
Container<-readMM("C:/Users/mbagnara/Dropbox/AlienSpeciesSpread/Data/CargoFlows/containerTotal.mtx")
Container<-Matrix::readMM("C:/Users/mbagnara/Dropbox/AlienSpeciesSpread/Data/CargoFlows/containerTotal.mtx")
Container<-read.table("C:/Users/mbagnara/Dropbox/AlienSpeciesSpread/Data/CargoFlows/containerTotal.mtx",skip=4)
head(Container)
nrow(Container)
length(unique(CargoFlow@data$codeSSPD))
length(unique(Container$V1))
length(unique(Container$V2))
length(unique(CargoFlow@data$codeLfdnr))
Container$V1%in%CargoFlow@data$codeSSPD
Container$V1%in%CargoFlow@data$codeLfdnr
libray(rgeos)
init_coords <-data.frame(Long=c(9.9938531,13.2862487),Lat=c(53.5396466,52.5588327),Iter=c(0,20))  #data.frame(Long=c(9.9938531,13.2862487),Lat=c(53.5396466,52.5588327)) # Hamburg Hafen & Berlin airport
CargoFlow<-readOGR(dsn = "C:/Users/mbagnara/Dropbox/AlienSpeciesSpread/Data/CargoFlows", layer="DModell_SSP_7334")
library(CASPIAN)
CargoFlow<-readOGR(dsn = "C:/Users/mbagnara/Dropbox/AlienSpeciesSpread/Data/CargoFlows", layer="DModell_SSP_7334")
coordinates(init_coords)<- ~ Lon+later::
coordinates(init_coords)<- ~ Lon+Lat
coordinates(init_coords)<- ~ Long+Lat
proj4string(init_coords)<-proj4string(CargoFlow)
over(init_coords,CargoFlow)
proj4string(CargoFlow)
source('~/GitHub/AlienSpeciesSpread/Scripts/getNodesCoord.R', echo=TRUE)
NodesCoords<-getNodesCoord(Road_Railway_Network)
shapeObj<-Road_Railway_Network
## extract coordinates from shapefile
res <- lapply(slot(shapeObj, "lines"), function(x) lapply(slot(x, "Lines"),function(y) slot(y, "coords")))
## extract first/last row of coordinates
from_node <- as.data.frame(do.call("rbind",lapply(res,"[[",1)),stringsAsFactors=F)
to_node   <- as.data.frame(do.call("rbind",lapply(lapply(res,"[[",1),function(s) s[dim(s)[1],])),stringsAsFactors=F)
from_node$nodeID <- shapeObj@data$FromNode
res
from_node
length(res)
## extract first/last row of coordinates
from_node <- as.data.frame(do.call("rbind",lapply(res,"[[",1)),stringsAsFactors=F)
nrow(from_node)
lapply(res,"[[",1)
length(lapply(res,"[[",1)))
length(lapply(res,"[[",1))
do.call("rbind",lapply(res,"[[",1))
head(do.call("rbind",lapply(res,"[[",1)))
from_node<-(do.call("rbind",lapply(res,"[[",1)))
nrow(from_node)
length(lapply(res,"[[",1))
x<-(lapply(res,"[[",1))
head(x)
to_node   <- as.data.frame(do.call("rbind",lapply(lapply(res,"[[",1),function(s) s[dim(s)[1],])),stringsAsFactors=F)
nrow(to_node)
head(to_node)
to_node   <- as.data.frame(do.call("rbind",lapply(lapply(res,"[[",1),function(s) s[dim(s)[2],])),stringsAsFactors=F)
head(to_node)
to_node   <- as.data.frame(do.call("rbind",lapply(lapply(res,"[[",1),function(s) s[dim(s)[1]-1,])),stringsAsFactors=F)
head(to_node)
source('~/GitHub/AlienSpeciesSpread/Scripts/getNodesCoord.R', echo=TRUE)
NodesCoords<-getNodesCoord(Road_Railway_Network)
head(NodesCoords)
## extract coordinates from shapefile
res <- lapply(slot(shapeObj, "lines"), function(x) lapply(slot(x, "Lines"),function(y) slot(y, "coords")))
## extract first/last row of coordinates
from_node <- as.data.frame(do.call("rbind",lapply(lapply(res,"[[",1),function(s) s[dim(s)[1]-1,])),stringsAsFactors=F)
to_node   <- as.data.frame(do.call("rbind",lapply(lapply(res,"[[",1),function(s) s[dim(s)[1],])),stringsAsFactors=F)
from_node$nodeID <- shapeObj@data$FromNode
head(from_node)
allnodes <- merge(unique(from_node),unique(to_node),by="nodeID",all=T)
to_node$nodeID <- shapeObj@data$ToNode
allnodes <- merge(unique(from_node),unique(to_node),by="nodeID",all=T)
head(allnodes)
allnodes <- merge(from_node,to_node,by="nodeID",all=T)
unique(allnodes[,1:3])
x<-unique(allnodes[,1:3])
head(x)
x<-allnodes[!duplicated(allnodes[,c('nodeID')]),]
head(x)
x<-allnodes[!duplicated(allnodes[1:3,c('nodeID')]),]
source('~/GitHub/AlienSpeciesSpread/Scripts/getNodesCoord.R', echo=TRUE)
NodesCoords<-getNodesCoord(Road_Railway_Network)
## node coordinates
nodeIDs<-allnodes[!duplicated(allnodes[1:3,c('nodeID')]),]
nodeIDs[is.na(nodeIDs[,2]),2]
allnodes[is.na(nodeIDs[,2]),4]
head(allnodes)
source('~/GitHub/AlienSpeciesSpread/Scripts/getNodesCoord.R', echo=TRUE)
NodesCoords<-getNodesCoord(Road_Railway_Network)
head(NodesCoords)
nrow(NodesCoords)
source('~/GitHub/AlienSpeciesSpread/Scripts/getNodesCoord.R', echo=TRUE)
NodesCoords<-getNodesCoord(Road_Railway_Network)
head(NodesCoords)
coordinates(NodesCoords)<- ~ Long+Lat
proj4string(NodesCoords)<-proj4string(CargoFlow)
Nodes_CargoCell<-cbind(NodesCoords[,1],over(NodesCoords,CargoFlow))
head(Nodes_CargoCell)
Nodes_CargoCell<-over(NodesCoords,CargoFlow)
head(Nodes_CargoCell)
str(Nodes_CargoCell)
cbind(Nodes_CargoCell,NodesCoords@data$nodeID)
Nodes_CargoCell<-cbind(Nodes_CargoCell,NodesCoords@data$nodeID)
head(Nodes_CargoCell)
runCASPIAN("~/../Desktop/configFile.R")
runCASPIAN("~/../Desktop/configFile.R")
runCASPIAN("~/../Desktop/configFile.R")
x11()
plot(CargoFlow)
Container<-read.table("C:/Users/mbagnara/Dropbox/AlienSpeciesSpread/Data/CargoFlows/containerTotal.mtx",h=T)
Container<-read.table("C:/Users/mbagnara/Dropbox/AlienSpeciesSpread/Data/CargoFlows/containerTotal.mtx",skip=4)
hist(Container[,3],nclass=100)
hist(Container[,3],nclass=100)
