road_netw[,Traffic:=rowSums(cbind(cargo,passengers))]
}
)
road_netw[,Traffic:=round((Traffic)*365/12,0)]
set(road_netw, j=which(colnames(road_netw) %in% c("cargo","passengers")), value=NULL )
if (any(road_netw[,Length==0])){ #assign length of 10m to segments with length 0
options(warn=1)
road_netw[Length==0,Length:=0.01]
warning("Links of length 0 detected in Terrestrial_netw_data. Their length has been set to 10m. ")
options(warn=0)
}
road_netw[,newarrivals:=0]
road_netw[,newarrivals:=as.numeric(newarrivals)]
road_netw[,stateFromNode:=0]
road_netw[,stateToNode:=0]
###############################################################
## Identify starting nodes ####################################
cat("\n Initializing node states \n")
## Identifying initial invasion segments
init_segm <- getNeighbourSegmCoord(shapeObj=roads_shp,init_coords=init_coords,max_dist=max_dist)
## Assigning initial state=1 to starting nodes ###################
init_nodes <- road_netw[ID%in%init_segm,c(FromNode,ToNode)] # new
road_netw[FromNode%in%init_nodes,stateFromNode:=1]
road_netw[ToNode%in%init_nodes,stateToNode:=1]
####################################################################
## identify nodes in each cargo area if commodities are considered
if  (incl_containers==TRUE | incl_pallets==TRUE) {
cat("\n Initializing trade regions \n")
CargoAreas<-Commodities_shape_data
CargoAreas@data$AreaContainer <- as.character(CargoAreas@data$AreaContainer)
CargoAreas@data$AreaPallet <- as.character(CargoAreas@data$AreaPallet)
NodesCoords<-getNodesCoord(roads_shp)
coordinates(NodesCoords)<- ~ Long+Lat
proj4string(NodesCoords)<-proj4string(CargoAreas)
Nodes_CargoCell<-over(NodesCoords,CargoAreas)
Nodes_CargoCell<-as.data.table(cbind(Nodes_CargoCell,NodesCoords@data$nodeID,stringsAsFactors=F))
setnames(Nodes_CargoCell,c(names(Nodes_CargoCell)[1:2],"NodeID"))
}
####################################################################
if (incl_pallets==TRUE){
init_coords2<-init_coords
coordinates(init_coords2)<- ~ Long+Lat
proj4string(init_coords2)<-proj4string(CargoAreas)
init_Areas<-as.character(over(init_coords2,CargoAreas)$AreaPallet)
}
#load pallet flow
Pallets_netw<-as.data.table(Pallets_netw_data)#need to update to provide external file here. Perhaps also in network file?
str(PalletsFlow)
Pallets_netw$ToArea <- (as.character(Pallets_netw$ToArea))
Pallets_netw$FromArea <- (as.character(Pallets_netw$FromArea))
Pallets_netw<-Pallets_netw[FromArea!=ToArea,] #remove traffic from/to same area
Pallets_netw<-Pallets_netw[ToArea%in%Nodes_CargoCell$AreaPallet,] #subset, keep only areas where there are traffic nodes of the chosen netw_type
# remove links with number of exchanged pallets per year < than Pall_threshold:
if (Pall_threshold>0) { Pallets_netw<-Pallets_netw[numPallets>=Pall_threshold,]}
Pallets_netw[,numPallets:=numPallets/12] #monthly scale
#assign Area LinkIDs
Pallets_netw[,AreaLinkID:=paste(FromArea,ToArea,sep="_")]
Pallets_netw
dim(Pallets_netw)
Nodes_CargoCell
length(unique(Nodes_CargoCell$NodeID))
length(unique(Nodes_CargoCell$AreaContainer))
length(unique(Nodes_CargoCell$AreaPallet))
source('~/GitHub/AlienSpeciesSpread/Scripts/InitializationScript.R')
PalletsToNetw
Nodes_CargoCell
source(configFile,local=TRUE)
# build parameter matrix
parameters<-matrix(c(par_att0_Roads,par_att0_Railways,par_att1,par_att2,par_att3,
par_air0_Roads,par_air0_Railways,par_air1,par_air2,
par_nat1,par_nat2,par_est_T,par_cont,par_pall,
par_mobile_proportion,par_stat_speed,par_mob_speed,
par_a,par_c1,par_g,par_c2,par_b,par_c3,par_est_W
),nrow=1,byrow=T)
colnames(parameters)<-c("S_att0", "R_att0","att1","att2","att3","S_air0","R_air0", "air1","air2","nat1","nat2","estT","cont1","pall1",
"mob_prop","stat_speed","mob_speed","alpha","c1","gamma","c2","beta","c3","estW")
#build land cover species preference matrix
species_preferences<- data.table(LC_cat_ID= 1:5,Species_preferences=c(Urban_areas,Arable_land,Pastures,Forests,Wetlands))
mainDir
init_coords=init_coords_T
num_iter=num_iter_T
max_dist = max_dist_T
iter_save = iter_save_T
traffic_type=c("all")
netw_type=c("all")
Pall_treshold <- 5
### load and format shapefiles (takes a while!) ######################################################
tmp2 <- proc.time()
####################################################################
### load road and railway network file #############################
cat("\n Loading network \n")
roads_shp<-Terrestrial_netw_data
colnames(roads_shp@data) <- c("FromNode","ToNode","Type","Length","cargo","passengers", "ID")
if (all(netw_type!=c("all"))) roads_shp<-roads_shp[roads_shp@data$Type%in%netw_type,]
road_netw <- as.data.table(roads_shp@data)
road_netw[,Order:=c(1:nrow(roads_shp@data))]
suppressWarnings(
if (all(traffic_type!=c("all"))) {
colTraffic<-which(colnames(road_netw)%in%traffic_type)
road_netw[,Traffic:=rowSums(road_netw[, ..colTraffic])]
} else {
road_netw[,Traffic:=rowSums(cbind(cargo,passengers))]
}
)
road_netw[,Traffic:=round((Traffic)*365/12,0)]
set(road_netw, j=which(colnames(road_netw) %in% c("cargo","passengers")), value=NULL )
if (any(road_netw[,Length==0])){ #assign length of 10m to segments with length 0
options(warn=1)
road_netw[Length==0,Length:=0.01]
warning("Links of length 0 detected in Terrestrial_netw_data. Their length has been set to 10m. ")
options(warn=0)
}
road_netw[,newarrivals:=0]
road_netw[,newarrivals:=as.numeric(newarrivals)]
road_netw[,stateFromNode:=0]
road_netw[,stateToNode:=0]
###############################################################
## Identify starting nodes ####################################
cat("\n Initializing node states \n")
## Identifying initial invasion segments
init_segm <- getNeighbourSegmCoord(shapeObj=roads_shp,init_coords=init_coords,max_dist=max_dist)
## Assigning initial state=1 to starting nodes ###################
init_nodes <- road_netw[ID%in%init_segm,c(FromNode,ToNode)] # new
road_netw[FromNode%in%init_nodes,stateFromNode:=1]
road_netw[ToNode%in%init_nodes,stateToNode:=1]
####################################################################
## identify nodes in each cargo area if commodities are considered
if  (incl_containers==TRUE | incl_pallets==TRUE) {
cat("\n Initializing trade regions \n")
CargoAreas<-Commodities_shape_data
CargoAreas@data$AreaContainer <- as.character(CargoAreas@data$AreaContainer)
CargoAreas@data$AreaPallet <- as.character(CargoAreas@data$AreaPallet)
NodesCoords<-getNodesCoord(roads_shp)
coordinates(NodesCoords)<- ~ Long+Lat
proj4string(NodesCoords)<-proj4string(CargoAreas)
Nodes_CargoCell<-over(NodesCoords,CargoAreas)
Nodes_CargoCell<-as.data.table(cbind(Nodes_CargoCell,NodesCoords@data$nodeID,stringsAsFactors=F))
setnames(Nodes_CargoCell,c(names(Nodes_CargoCell)[1:2],"NodeID"))
}
####################################################################
## identify Areas initialy invaded (for pallets only) from init_coords
if (incl_pallets==TRUE){
init_coords2<-init_coords
coordinates(init_coords2)<- ~ Long+Lat
proj4string(init_coords2)<-proj4string(CargoAreas)
init_Areas<-as.character(over(init_coords2,CargoAreas)$AreaPallet)
}
###############################################################
## Pallets flows ##############################################
if  (incl_pallets==TRUE) {
cat("\n Initializing pallets flows \n")
#load pallet flow
Pallets_netw<-as.data.table(Pallets_netw_data)#need to update to provide external file here. Perhaps also in network file?
Pallets_netw$ToArea <- (as.character(Pallets_netw$ToArea))
Pallets_netw$FromArea <- (as.character(Pallets_netw$FromArea))
Pallets_netw<-Pallets_netw[FromArea!=ToArea,] #remove traffic from/to same area
Pallets_netw<-Pallets_netw[ToArea%in%Nodes_CargoCell$AreaPallet,] #subset, keep only areas where there are traffic nodes of the chosen netw_type
# remove links with number of exchanged pallets per year < than Pall_threshold:
if (Pall_threshold>0) { Pallets_netw<-Pallets_netw[numPallets>=Pall_threshold,]}
Pallets_netw[,numPallets:=numPallets/12] #monthly scale
#assign Area LinkIDs
Pallets_netw[,AreaLinkID:=paste(FromArea,ToArea,sep="_")]
# initialize state of Cargo Areas
Pallets_netw[,stateFromArea:=0]
Pallets_netw[,stateToArea:=0]
Pallets_netw[,newarrivals:=0]
# Update initial state of Cargo Areas
Pallets_netw[FromArea%in%init_Areas,stateFromArea:=1]
Pallets_netw[ToArea%in%init_Areas,stateToArea:=1]
}
###############################################################
## Container flows ############################################
if  (incl_containers==TRUE) {
cat("\n Initializing Containers Flow \n")
## container data
Container_netw<-as.data.table(Container_netw_data) #need to update to provide external file here. Perhaps also in network file?
Container_netw$ToArea <- as.character(Container_netw$ToArea)
Container_netw$FromArea <- as.character(Container_netw$FromArea)
Container_netw<-Container_netw[FromArea!=ToArea,] #remove traffic from/to same area
Container_netw<-Container_netw[ToArea%in%Nodes_CargoCell$AreaContainer,] #subset, keep only areas where there are traffic nodes of the chosen netw_type
# remove areas with number of arriving containers per year < than Cont_treshold:
if (Cont_treshold>0) { Container_netw<-Container_netw[numContainers>=Cont_treshold,]}
Container_netw[,numContainers:=numContainers/12] #monthly scale
Container_netw<-as.data.table(aggregate(numContainers ~ ToArea, Container_netw, sum))
Nodes_ContCell<-Nodes_CargoCell[,c(1,3)]
colnames(Nodes_ContCell)<-c("ToArea","FromNode")
setkey(Container_netw,ToArea)
setkey(Nodes_ContCell,ToArea)
Container_netw<-merge(Container_netw,Nodes_ContCell,by="ToArea")
#divide number of container per number of nodes in each area (assumes each nodes gets same number of containers)
NodesPerArea<-as.data.table(table(Container_netw$ToArea))
colnames(NodesPerArea)<-c("ToArea","numNodes")
setkey(NodesPerArea,ToArea)
Container_netw<-merge(Container_netw,NodesPerArea,by="ToArea")
Container_netw[,numContainers:=numContainers/numNodes]
set(Container_netw, j=which(colnames(Container_netw) %in% c("ToArea","numNodes")), value=NULL )
}
# setkey(road_netw,FromNode)
###############################################################
## Calculate suitability of terrestrial habtitats #############
cat("\n Calculating suitability of habitats \n")
fpath<-system.file("extdata", package="CASPIAN")
LCdata <- readRDS(file.path(fpath,"LandCover_RailsRoadsInters_50m.rds"))
categories <- read.xlsx(file.path(fpath,"clc_legend_categories.xlsx"),sheet=2) # load new categories
categories <- categories[,c("GRID_CODE","LC_cat_ID")]
categories<-as.data.table(categories)
setkey(categories,LC_cat_ID)
setkey(species_preferences,LC_cat_ID)
categories <- species_preferences[categories]
### assign new land cover categories and species preferences
LCdata$LCtype <- categories$LC_cat_ID[match(LCdata$LC_ID,categories$GRID_CODE)] # assign new categories
LCdata$SpecPref <- categories$Species_preferences[match(LCdata$LC_ID,categories$GRID_CODE)] # assign new categories
LCdata$LCprop <- LCdata$prop * LCdata$SpecPref
## calculate suitability of habitats for each segment
LCdata <- as.data.table(LCdata)
road_segm_suit <- LCdata[,sum(LCprop),by=list(LinkID)]
road_segm_suit[V1>1,V1:=1]
## merge land cover suitability and road_netw
colnames(road_segm_suit) <- c("ID","LCsuit")
setkey(road_segm_suit,ID)
setkey(road_netw,ID)
road_netw <- road_segm_suit[road_netw]
###########################################################
## Combine all relevant data files ########################
cat("\n Assembling initialization object \n")
setkey(road_netw,Order)
roads_shp@data<-road_netw
if (incl_pallets==FALSE & incl_containers==FALSE){
init_obj<-list(roads_shp,init_segm)
names(init_obj)<-c("roads_shp","init_segm")
} else if (incl_pallets==FALSE & incl_containers==TRUE){
init_obj<-list(roads_shp,init_segm,Nodes_CargoCell,Container_netw)
names(init_obj)<-c("roads_shp","init_segm","Nodes_CargoCell","Container_netw")
} else if (incl_pallets==TRUE & incl_containers==FALSE){
init_obj<-list(roads_shp,init_segm,Nodes_CargoCell,Pallets_netw,init_Areas)
names(init_obj)<-c("roads_shp","init_segm","Nodes_CargoCell","Pallets_netw","init_Areas")
} else if (incl_pallets==TRUE & incl_containers==TRUE){
init_obj<-list(roads_shp,init_segm,Nodes_CargoCell,Container_netw,Pallets_netw,init_Areas)
names(init_obj)<-c("roads_shp","init_segm","Nodes_CargoCell","Container_netw","Pallets_netw","init_Areas")
}
if (save_init) {
cat("\n Saving initialization object \n")
save(init_obj, file = file.path(save_dir,file_init))
}
print(proc.time() - tmp2)
Nodes_CargoCell
?merge.data.table
for(i in 1:length(init_obj)) assign(names(init_obj)[i], init_obj[[i]])
road_netw<-init_obj[["roads_shp"]]@data
nparset
nparset<-1
if (incl_containers==TRUE){
cat("\n Calculating Probability of introduction by container for each node \n")
Container_netw[,Pi_container:=f_container(numContainers,parameters[nparset,"pall1"])]
Container_netw[,numContainers:=NULL]
# set(Container_netw, j=which(colnames(Container_netw) %in% c("numContainers")), value=NULL )
names(Container_netw)[1]<-c("ToNode")
setkey(Container_netw,ToNode)
setkey(road_netw,ToNode)
road_netw<-merge(road_netw,Container_netw,by="ToNode",all.x=T) # adding container state of ToNode
road_netw$ToNode <- as.character(road_netw$ToNode)
# road_netw[,stateToNode:=Pi_container]
#Filling NAs (some nodes are only from_nodes or to_nodes, or are not in the Cargo Areas)
road_netw[is.na(Pi_container),Pi_container:=0]
## ERROR check for Pi_container
if (is.numeric(road_netw[,Pi_container])==FALSE |
any(road_netw[,Pi_container<0]) | any(road_netw[,Pi_container>1])) {
assign(x = "road_netw",value = road_netw,envir = .GlobalEnv)
stop ("Problem in probability calculations: Pi_container either non-numeric or not in 0:1 range")
}
} else {
road_netw[,Pi_container:=0]
}
cat("\n Calculating Probability of Introduction for each Cargo area \n")
#Assigning probability to Cargo links for Pallets,
#using same kernel than containers with different parameterization:
Pallets_netw[,Pi_pallet:=f_container(numPallets,parameters[nparset,"pall1"])]
Pallets_netw[is.na(Pi_pallet),Pi_pallet:=0]
## ERROR check for pi_Pallet
if (is.numeric(Pallets_netw[,Pi_pallet])==FALSE |
any(Pallets_netw[,Pi_pallet<0]) | any(Pallets_netw[,Pi_pallet>1])) {
assign(x = "Pallets_netw",value = Pallets_netw,envir = .GlobalEnv)
stop ("Problem in probability calculations: Pi_pallet either non-numeric or not in 0:1 range")
}
road_netw
road_netw <- merge(road_netw,Nodes_CargoCell,by.x="ToNode",by.y="NodeID",all.x=T)
road_netw
setnames(Nodes_CargoCell,c("AreaContainer","ToArea","ToNode"))
Nodes_CargoCell
road_netw <- merge(road_netw,Nodes_CargoCell,by="ToNode",all.x=T)
road_netw
setkey(road_netw,ToArea)
setkey(road_netw,ToArea)
setkey(road_netw,ToArea)
source('~/GitHub/AlienSpeciesSpread/Scripts/InitializationScript.R')
road_netw_out
road_netw
key(road_netw)
key(road_netw_details)
road_netw_details
str(road_netw_details)
str(road_netw)
is.numeric(road_netw_out[,stateFromNode])
road_netw_out[,stateFromNode]
str(road_netw_out)
library(CASPIAN)
source('~/GitHub/AlienSpeciesSpread/Scripts/InitializationScript.R')
library(CASPIAN)
source('~/GitHub/AlienSpeciesSpread/Scripts/InitializationScript.R')
Nodes_CargoCell
Nodes_CargoCell
road_netw
all(unique(road_netw$ToNode)%in%Nodes_CargoCell$ToNode)
all(Nodes_CargoCell$ToNode%in%unique(road_netw$ToNode))
Nodes_CargoCell[!Nodes_CargoCell$ToNode%in%unique(road_netw$ToNode)]
write.table(Nodes_CargoCell[!Nodes_CargoCell$ToNode%in%unique(road_netw$ToNode)],"ToNodes_not_in_road_netw.csv")
library(CASPIAN)
library(CASPIAN)
source('~/GitHub/AlienSpeciesSpread/Scripts/InitializationScript.R')
devtools::load_all("~/GitHub/AlienSpeciesSpread/CASPIAN")
library(CASPIAN)
source('~/GitHub/AlienSpeciesSpread/Scripts/InitializationScript.R')
road_netw
dim(road_netw)
oo <- order(road_netw$ToNode)
Nodes_CargoCell
library(CASPIAN)
source('~/GitHub/AlienSpeciesSpread/Scripts/InitializationScript.R')
all(Nodes_CargoCell$ToNode%in%road_netw$ToNode)
all(road_netw$ToNode%in%Nodes_CargoCell$ToNode)
dim(road_netw)
dim(road_netw)
road_netw
source('~/GitHub/AlienSpeciesSpread/Scripts/InitializationScript.R')
oo <- order(road_netw$ToNode)
identical(order(road_netw$ToNode),oo)
library(CASPIAN)
library(CASPIAN)
source('~/GitHub/AlienSpeciesSpread/Scripts/InitializationScript.R')
library(CASPIAN)
library(CASPIAN)
library(CASPIAN)
library(CASPIAN)
Water_netw_data
rm(list=ls())
graphics.off()
# library(rgdal) # only used for plotting
# library(sf)
# library(data.table)
# library(openxlsx)
# mainDir<-"C:/Users/mbagnara/Desktop/BiK-F postDoc/Model"
mainDir<-"/home/hanno/Bioinvasion/EBAspread/Model"
setwd(mainDir)
# configFile<-file.path(system.file("extdata", package="CASPIAN"),"configFile.R")
configFile<- "/home/hanno/GitHub/AlienSpeciesSpread/CASPIAN/inst/extdata/configFile.R"
source(configFile,local=TRUE)
# build parameter matrix
parameters<-matrix(c(par_att0_Roads,par_att0_Railways,par_att1,par_att2,par_att3,
par_air0_Roads,par_air0_Railways,par_air1,par_air2,
par_nat1,par_nat2,par_est_T,par_cont,par_pall,
par_mobile_proportion,par_stat_speed,par_mob_speed,
par_a,par_c1,par_g,par_c2,par_b,par_c3,par_est_W
),nrow=1,byrow=T)
colnames(parameters)<-c("S_att0", "R_att0","att1","att2","att3","S_air0","R_air0", "air1","air2","nat1","nat2","estT","cont1","pall1",
"mob_prop","stat_speed","mob_speed","alpha","c1","gamma","c2","beta","c3","estW")
#build land cover species preference matrix
species_preferences<- data.table(LC_cat_ID= 1:5,Species_preferences=c(Urban_areas,Arable_land,Pastures,Forests,Wetlands))
modelResults<-list()
source(configFile,local=TRUE)
# build parameter matrix
parameters<-matrix(c(par_att0_Roads,par_att0_Railways,par_att1,par_att2,par_att3,
par_air0_Roads,par_air0_Railways,par_air1,par_air2,
par_nat1,par_nat2,par_est_T,par_cont,par_pall,
par_mobile_proportion,par_stat_speed,par_mob_speed,
par_a,par_c1,par_g,par_c2,par_b,par_c3,par_est_W
),nrow=1,byrow=T)
colnames(parameters)<-c("S_att0", "R_att0","att1","att2","att3","S_air0","R_air0", "air1","air2","nat1","nat2","estT","cont1","pall1",
"mob_prop","stat_speed","mob_speed","alpha","c1","gamma","c2","beta","c3","estW")
#build land cover species preference matrix
species_preferences<- data.table(LC_cat_ID= 1:5,Species_preferences=c(Urban_areas,Arable_land,Pastures,Forests,Wetlands))
modelResults<-list()
runAquaticModel==TRUE
runAquaticModel
cat("\n Running Aquatic Model \n")
tmp <- proc.time()
#running model:
dir.name_W<-file.path(getwd(),paste0("CASPIAN_Aquatic_",format(Sys.time(), "%d-%b-%Y %H-%M-%S")))
dir.create(dir.name_W)
Water_netw_data
length(Water_netw_data)
water_shp<-Water_netw_data
colnames(water_shp@data) <- c("FromNode","ToNode","Motorized", "Non_motorized","Length","ID")
water_netw <- as.data.table(water_shp@data)
water_netw[,Order:=c(1:nrow(water_shp@data))]
water_netw
water_netw$ID
getwd()
port_data <- read.table("../Data/Waterways/PortNodeData.csv",sep=";",stringsAsFactors = F)
port_data
port_data <- fread("../Data/Waterways/PortNodeData.csv",sep=";",stringsAsFactors = F)
?fread
port_data <- fread("../Data/Waterways/PortNodeData.csv",sep=";",stringsAsFactors = F)
port_data
water_netw
dim(water_netw)
key(water_netw)
setkey(water_netw,ToNode)
port_data
setkey(port_data,nodeID)
water_netw <- merge(water_netw,port_data,by.x="ToNode",by.y="nodeID",all.x=T)
str(port_data)
str(water_netw)
port_data$nodeID <- as.character(port_data$nodeID)
port_data <- fread("../Data/Waterways/PortNodeData.csv",sep=";",stringsAsFactors = F)
port_data$nodeID <- as.character(port_data$nodeID)
setkey(water_netw,ToNode)
setkey(port_data,nodeID)
water_netw <- merge(water_netw,port_data,by.x="ToNode",by.y="nodeID",all.x=T)
dim(water_netw)
water_netw
water_netw[Cargo_in_kt>0]
ind <- grep("Berlin",water_netw$Port)
ind
water_netw[ind,]
d <- aggregate(water_netw$Motorized,by=list(water_netw$Port),sum)
d
View(d)
ind <- grep("Berlin",d[,1])
ind
d[ind,]
d[ind,]/sum(d[ind,])
d[ind,2]/sum(d[ind,2])
d[ind,2]/sum(d[ind,2]) * 3886
round(d[ind,2]/sum(d[ind,2]) * 3886)
d
d[ind,]
round(d[ind,2]/sum(d[ind,2]) * 3886)
port_data <- fread("../Data/Waterways/PortNodeData.csv",sep=";",stringsAsFactors = F)
port_data$nodeID <- as.character(port_data$nodeID)
setkey(water_netw,ToNode)
setkey(port_data,nodeID)
water_netw <- merge(water_netw,port_data,by.x="ToNode",by.y="nodeID",all.x=T)
water_netw
water_shp<-Water_netw_data
colnames(water_shp@data) <- c("FromNode","ToNode","Motorized", "Non_motorized","Length","ID")
water_netw <- as.data.table(water_shp@data)
water_netw[,Order:=c(1:nrow(water_shp@data))]
port_data <- fread("../Data/Waterways/PortNodeData.csv",sep=";",stringsAsFactors = F)
port_data$nodeID <- as.character(port_data$nodeID)
setkey(water_netw,ToNode)
setkey(port_data,nodeID)
water_netw <- merge(water_netw,port_data,by.x="ToNode",by.y="nodeID",all.x=T)
water_netw
water_shp<-Water_netw_data
colnames(water_shp@data) <- c("FromNode","ToNode","Motorized", "Non_motorized","Length","ID")
water_netw <- as.data.table(water_shp@data)
water_netw[,Order:=c(1:nrow(water_shp@data))]
port_data <- fread("../Data/Waterways/PortNodeData.csv",sep=";",stringsAsFactors = F)
port_data$nodeID <- as.character(port_data$nodeID)
setkey(water_netw,ToNode)
setkey(port_data,nodeID)
water_netw <- merge(water_netw,port_data[,c("NodeID","Cargo_in_kt")],by.x="ToNode",by.y="nodeID",all.x=T)
port_data
water_netw <- merge(water_netw,port_data[,c("nodeID","Cargo_in_kt")],by.x="ToNode",by.y="nodeID",all.x=T)
water_netw
rm(list=ls())
graphics.off()
# library(rgdal) # only used for plotting
# library(sf)
# library(data.table)
# library(openxlsx)
# mainDir<-"C:/Users/mbagnara/Desktop/BiK-F postDoc/Model"
mainDir<-"/home/hanno/Bioinvasion/EBAspread/Model"
setwd(mainDir)
# configFile<-file.path(system.file("extdata", package="CASPIAN"),"configFile.R")
configFile<- "/home/hanno/GitHub/AlienSpeciesSpread/CASPIAN/inst/extdata/configFile.R"
source(configFile,local=TRUE)
library(CASPIAN)
source(configFile,local=TRUE)
for(i in 1:length(init_obj)) assign(names(init_obj)[i], init_obj[[i]])
water_netw<-water_shp@data
# build parameter matrix
parameters<-matrix(c(par_att0_Roads,par_att0_Railways,par_att1,par_att2,par_att3,
par_air0_Roads,par_air0_Railways,par_air1,par_air2,
par_nat1,par_nat2,par_est_T,par_cont,par_pall,
par_mobile_proportion,par_stat_speed,par_mob_speed,
par_a,par_c1,par_g,par_c2,par_b,par_c3,par_est_W
),nrow=1,byrow=T)
colnames(parameters)<-c("S_att0", "R_att0","att1","att2","att3","S_air0","R_air0", "air1","air2","nat1","nat2","estT","cont1","pall1",
"mob_prop","stat_speed","mob_speed","alpha","c1","gamma","c2","beta","c3","estW")
#build land cover species preference matrix
species_preferences<- data.table(LC_cat_ID= 1:5,Species_preferences=c(Urban_areas,Arable_land,Pastures,Forests,Wetlands))
modelResults<-list()
tmp2 <- proc.time()
cat("\n Loading network \n")
water_shp<-Water_netw_data
colnames(water_shp@data) <- c("FromNode","ToNode","Motorized", "Non_motorized","Length","ID")
water_netw <- as.data.table(water_shp@data)
water_netw[,Order:=c(1:nrow(water_shp@data))]
## add cargo turnover of ports to identify ports and their sizes
port_data <- fread("../Data/Waterways/PortNodeData.csv",sep=";",stringsAsFactors = F)
port_data$nodeID <- as.character(port_data$nodeID)
setkey(water_netw,ToNode)
setkey(port_data,nodeID)
water_netw <- merge(water_netw,port_data[,c("nodeID","Cargo_in_kt")],by.x="ToNode",by.y="nodeID",all.x=T)
water_netw[!is.na(Cargo_in_kt)]
water_netw[!is.na(Cargo_in_kt),Motorized]
water_netw[100]
water_netw[!is.na(Cargo_in_kt),][100,]
port_data
water_netw[FromNode==324217000]
water_netw[ToNode==324217000]
